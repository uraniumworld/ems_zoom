[{"C:\\Github\\ems_zoom\\src\\index.js":"1","C:\\Github\\ems_zoom\\src\\reportWebVitals.js":"2","C:\\Github\\ems_zoom\\src\\App.js":"3","C:\\Github\\ems_zoom\\src\\mobx\\global-context.js":"4","C:\\Github\\ems_zoom\\src\\ui\\home.js":"5","C:\\Github\\ems_zoom\\src\\config.js":"6","C:\\Github\\ems_zoom\\src\\ui\\login.js":"7","C:\\Github\\ems_zoom\\src\\ui\\view-group.js":"8","C:\\Github\\ems_zoom\\src\\ui\\view-student.js":"9","C:\\Github\\ems_zoom\\src\\layouts\\full-layout.js":"10","C:\\Github\\ems_zoom\\src\\mobx\\mobx-store.js":"11","C:\\Github\\ems_zoom\\src\\components\\services.js":"12","C:\\Github\\ems_zoom\\src\\client-ui\\workshop.js":"13","C:\\Github\\ems_zoom\\src\\client-ui\\theory.js":"14","C:\\Github\\ems_zoom\\src\\client-ui\\exam.js":"15","C:\\Github\\ems_zoom\\src\\client-ui\\client-home.js":"16","C:\\Github\\ems_zoom\\src\\components\\schedule.js":"17","C:\\Github\\ems_zoom\\src\\components\\top-menu.js":"18","C:\\Github\\ems_zoom\\src\\components\\footer.js":"19","C:\\Github\\ems_zoom\\src\\client-components\\client-services.js":"20","C:\\Github\\ems_zoom\\src\\client-components\\check-in-process.js":"21","C:\\Github\\ems_zoom\\src\\client-components\\exam-schedule-day.js":"22","C:\\Github\\ems_zoom\\src\\client-ui\\login-client.js":"23","C:\\Github\\ems_zoom\\src\\ui\\admin.js":"24","C:\\Github\\ems_zoom\\src\\client-ui\\student.js":"25","C:\\Github\\ems_zoom\\src\\client-components\\header.js":"26"},{"size":689,"mtime":1610935637950,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":1727,"mtime":1611288845325,"results":"30","hashOfConfig":"28"},{"size":113,"mtime":1609837365305,"results":"31","hashOfConfig":"28"},{"size":1897,"mtime":1610595551487,"results":"32","hashOfConfig":"28"},{"size":166,"mtime":1610935637950,"results":"33","hashOfConfig":"28"},{"size":1820,"mtime":1610935637958,"results":"34","hashOfConfig":"28"},{"size":3363,"mtime":1610935637958,"results":"35","hashOfConfig":"28"},{"size":23720,"mtime":1611297523318,"results":"36","hashOfConfig":"28"},{"size":621,"mtime":1611289576256,"results":"37","hashOfConfig":"28"},{"size":1146,"mtime":1611289153568,"results":"38","hashOfConfig":"28"},{"size":4425,"mtime":1611296943354,"results":"39","hashOfConfig":"28"},{"size":13027,"mtime":1611297679980,"results":"40","hashOfConfig":"28"},{"size":79,"mtime":1610935637947,"results":"41","hashOfConfig":"28"},{"size":1377,"mtime":1611303220962,"results":"42","hashOfConfig":"28"},{"size":91,"mtime":1610935637946,"results":"43","hashOfConfig":"28"},{"size":5333,"mtime":1610935637948,"results":"44","hashOfConfig":"28"},{"size":2120,"mtime":1610935637949,"results":"45","hashOfConfig":"28"},{"size":188,"mtime":1610935637948,"results":"46","hashOfConfig":"28"},{"size":1582,"mtime":1611306595685,"results":"47","hashOfConfig":"28"},{"size":8376,"mtime":1611307941395,"results":"48","hashOfConfig":"28"},{"size":2169,"mtime":1611297679979,"results":"49","hashOfConfig":"28"},{"size":2084,"mtime":1611298791795,"results":"50","hashOfConfig":"28"},{"size":1840,"mtime":1610940723849,"results":"51","hashOfConfig":"28"},{"size":1593,"mtime":1610950673454,"results":"52","hashOfConfig":"28"},{"size":303,"mtime":1610941504166,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"165z2ew",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"56"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Github\\ems_zoom\\src\\index.js",[],["121","122"],"C:\\Github\\ems_zoom\\src\\reportWebVitals.js",[],"C:\\Github\\ems_zoom\\src\\App.js",["123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"import './App.css';\r\nimport {Route, Switch, useLocation,Redirect} from 'react-router-dom';\r\nimport Login from \"./ui/login\";\r\nimport StateContext from \"./mobx/global-context\";\r\nimport MobxStore from \"./mobx/mobx-store\";\r\nimport {observer} from \"mobx-react\";\r\nimport Home from \"./ui/home\";\r\nimport FullLayout from \"./layouts/full-layout\";\r\nimport ViewGroup from \"./ui/view-group\";\r\nimport ViewStudent from \"./ui/view-student\";\r\nimport {ToastContainer, toast, Slide} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport {useEffect} from \"react\";\r\nimport {checkLogin} from \"./components/services\";\r\nimport {Alert} from \"react-bootstrap\"; // Import css\r\nimport Config from './config';\r\nimport Workshop from \"./client-ui/workshop\";\r\nimport ClientHome from \"./client-ui/client-home\";\r\nimport Theory from \"./client-ui/theory\";\r\nimport Exam from \"./client-ui/exam\";\r\nimport LoginClient from \"./client-ui/login-client\";\r\nimport Admin from \"./ui/admin\";\r\nimport Student from \"./client-ui/student\";\r\n\r\nexport const mobxStore = new MobxStore();\r\n\r\nfunction App() {\r\n    let location = useLocation();\r\n    let {adminPath} = Config;\r\n    return (\r\n        <StateContext.Provider value={mobxStore}>\r\n            <Switch>\r\n                <Route path={adminPath()}>\r\n                    <Admin/>\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Student/>\r\n                </Route>\r\n            </Switch>\r\n            <ToastContainer\r\n                transition={Slide}\r\n                limit={3}\r\n                autoClose={2000}\r\n            />\r\n        </StateContext.Provider>\r\n    );\r\n}\r\n\r\nexport default observer(App);\r\n","C:\\Github\\ems_zoom\\src\\mobx\\global-context.js",[],"C:\\Github\\ems_zoom\\src\\ui\\home.js",["139"],"import Schedule from \"../components/schedule\";\r\nimport {Col, Form, Row} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst currentDate=new Date();\r\nconst currentMonth=currentDate.getMonth();\r\nconst currentYear=currentDate.getFullYear();\r\nconst Home = ()=>{\r\n    const [selectedMonth,setSelectedMonth]=useState(currentMonth+1);\r\n    const [selectedYear,setSelectedYear]=useState(currentYear);\r\n\r\n\r\n    return <div>\r\n        <Row>\r\n            <Col md={6}>\r\n                <Form.Group>\r\n                    <Form.Label>Month</Form.Label>\r\n                    <Form.Control as=\"select\" value={selectedMonth} onChange={e=>{\r\n                        setSelectedMonth(e.target.value)\r\n                    }}>\r\n                        {\r\n                            [...new Array(31)].map((v,i)=>{\r\n                                let value = i+1;\r\n                                return <option key={value} value={value}>{value}</option>\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n                <Form.Group>\r\n                    <Form.Label>Year</Form.Label>\r\n                    <Form.Control as=\"select\" value={selectedYear} onChange={e=>{\r\n                        setSelectedYear(e.target.value)\r\n                    }}>\r\n                        {\r\n                            [...new Array(5)].map((v,i)=>{\r\n                                let value = currentYear-i;\r\n                                return <option key={value} value={value}>{value}</option>\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n        <Schedule month={selectedMonth} year={selectedYear}/>\r\n    </div>\r\n}\r\nexport default Home;\r\n","C:\\Github\\ems_zoom\\src\\config.js",[],"C:\\Github\\ems_zoom\\src\\ui\\login.js",[],"C:\\Github\\ems_zoom\\src\\ui\\view-group.js",["140","141","142"],"import {observer} from \"mobx-react\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport {Badge, Button, Card, Col, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {getEmailByScheduleDetail, getScheduleInfo} from \"../components/services\";\r\nimport Config from \"../config\";\r\n\r\nconst ViewGroup = () => {\r\n    const state = useContext(StateContext);\r\n    const {SchdID, SchdDetailID} = useParams();\r\n    const [schedule,setSchedule] = useState(null);\r\n    const [studentsWithGroup,setStudentsWithGroup] = useState(null);\r\n    const [showingGroup,setShowingGroup] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        state.scheduleMenu=[\r\n            {to:`/schedule/${SchdID}/${SchdDetailID}`,title:'Group'}\r\n        ];\r\n        getEmailByScheduleDetail(SchdID,SchdDetailID).then(res=>{\r\n            setStudentsWithGroup(res);\r\n        });\r\n        getScheduleInfo(SchdID,SchdDetailID).then(res=>{\r\n            setSchedule(res);\r\n        })\r\n    },[]);\r\n\r\n    function getEmail(group) {\r\n        if(!studentsWithGroup[group])return;\r\n        let text='';\r\n        studentsWithGroup[group].map(std=>{\r\n            text+=`${std.RegKKU.KKUMAIL},`;\r\n        })\r\n        return text.substr(0,text.length-1);\r\n    }\r\n    if(!schedule || !studentsWithGroup)return <div>Loading...</div>\r\n    return <>\r\n        <h3>รอบสอบ {schedule.SchdCode} ซึ่งมีทั้งหมด {studentsWithGroup && Object.keys(studentsWithGroup).length} กลุ่ม</h3>\r\n        <div dangerouslySetInnerHTML={{__html:schedule.DateRegist_Desc_Th}}></div>\r\n        <div>ภาค {schedule.ModuleType==1?<Badge variant=\"danger\">ทฤษฎี</Badge>:<Badge variant=\"info\">ปฏิบัติ</Badge>} ประจำวันที่ {schedule.ExamDate} / {schedule.ExamTimeStart}-{schedule.ExamTimeEnd}</div>\r\n        <Row>\r\n            {\r\n                studentsWithGroup && Object.keys(studentsWithGroup).map(grp =>\r\n                    <Col key={grp} md={6}>\r\n                        <Card className=\"mt-2\">\r\n                            <Card.Body>\r\n                                <Badge className=\"text-uppercase\">{grp}</Badge> ({studentsWithGroup[grp].length} คน) <Link to={Config.adminPath(`/schedule/${SchdID}/${SchdDetailID}/${grp}`)} className=\"btn btn-primary ml-2\">View</Link>\r\n                                <Button variant=\"secondary\" className=\"ml-2\" onClick={setShowingGroup.bind(this,grp)}>Email</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                )\r\n            }\r\n        </Row>\r\n        <Modal show={!!showingGroup} onHide={e=>setShowingGroup(null)}>\r\n            <Modal.Header closeButton>\r\n                <span className=\"text-uppercase\">{showingGroup}</span> : Email\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Control rows={20} as=\"textarea\" onChange={e=>{}} onClick={e=>e.target.select()} value={getEmail(showingGroup)}/>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={e=>setShowingGroup(null)}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </>\r\n}\r\nexport default observer(ViewGroup);\r\n","C:\\Github\\ems_zoom\\src\\ui\\view-student.js",["143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176"],"import {useParams} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {Alert, Badge, Button, Col, Form, FormControl, Image, InputGroup, Modal, Row, Table} from \"react-bootstrap\";\r\nimport {render} from \"@testing-library/react\";\r\nimport { uid } from 'uid';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport ScrollToTop from 'react-scroll-up';\r\nimport {\r\n    changeCheckInState,\r\n    getCheckInStudents,\r\n    getEmailByScheduleDetail, getMeetURL,\r\n    getScheduleInfo, removeMeetURL, setMeetURL, pairUserData, confirmBox, loadStudentPicture\r\n} from \"../components/services\";\r\nimport {toast} from \"react-toastify\";\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\n\r\nlet reloadStudentsTimer=void 0;\r\nlet reloadStudentPicturesTimer=void 0;\r\nconst ViewStudent = () => {\r\n    const state = useContext(StateContext);\r\n    const {SchdID, SchdDetailID,group} = useParams();\r\n    const [schedule, setSchedule] = useState();\r\n    const [meetRoom,setMeetRoom] = useState('');\r\n    const [students,setStudents] = useState([]);\r\n    const [loadingBtn,setLoadingBtn] = useState({});\r\n    const [filter,setFilter] = useState('');\r\n    const [copiedState,setCopiedState] = useState(0);\r\n    const [userPairingText,setUserPairingText] = useState('');\r\n    const [userPairing,setUserPairing] = useState(null);\r\n    const [showEmail,setShowEmail] = useState(false);\r\n\r\n    useEffect(() => {\r\n        state.scheduleMenu = [\r\n            {to: `/schedule/${SchdID}/${SchdDetailID}`, title: 'Group'},\r\n            {to: `/schedule/${SchdID}/${SchdDetailID}/${group}`, title: 'Students'}\r\n        ];\r\n        getMeetURL(SchdID,SchdDetailID,group).then(data=>{\r\n            if(data){\r\n                setMeetRoom(data.meet_url);\r\n                setCopiedState(4);\r\n            }\r\n        });\r\n        reloadStudents();\r\n        getScheduleInfo(SchdID,SchdDetailID).then(res=>{\r\n            setSchedule(res);\r\n        })\r\n        reloadStudentPicturesTimer=setInterval(()=>{reloadStudents()},15*1000);\r\n        return ()=>{\r\n            clearInterval(reloadStudentsTimer);\r\n            clearInterval(reloadStudentPicturesTimer);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        let textArr=userPairingText.split(/\\n/);\r\n        let buffer={};\r\n        let currentName=null;\r\n        let expGetName=new RegExp('(.+)(?:\\\\d+:\\\\d+) ?(?:AM|PM)?');\r\n        let expGetCode=new RegExp('((?:\\\\d{9}\\\\-\\\\d{1})|(?:\\\\d{10}))');\r\n        textArr.map(line=>{\r\n            let name=line.match(expGetName);\r\n            let code=line.match(expGetCode);\r\n            if(name && (name[1]=='You'||name[1]=='คุณ'))return;\r\n            if(name){\r\n                currentName=name[1].trim();\r\n                if(currentName.substr(-1).match(/1/)){\r\n                    currentName=currentName.substr(0,currentName.length-1);\r\n                }\r\n            }else if(currentName && code){\r\n                let existed = students.find(student=>student.StudentID==fixStudentCode(code[1]));\r\n                let existedCopied={...existed};\r\n                if(existedCopied){\r\n                    if(existedCopied.avatar_name && existedCopied.avatar_name!=currentName){\r\n                        console.log(existedCopied.avatar_name,currentName);\r\n                        existedCopied.pairError=true;\r\n                    }\r\n                    buffer[currentName]=existedCopied;\r\n                }\r\n            }\r\n        })\r\n        if(Object.keys(buffer).length>0){\r\n            setUserPairing({...buffer});\r\n        }else{\r\n            setUserPairing(null);\r\n        }\r\n    },[userPairingText]);\r\n\r\n    function reloadStudents(){\r\n        getCheckInStudents(SchdID,SchdDetailID,group).then(res=>{\r\n            res.map(std=>{\r\n                loadStudentPicture(std.Username).then(()=>{});\r\n            })\r\n            setStudents(sortState(res));\r\n        });\r\n    }\r\n\r\n    function sortState(students){\r\n        students.sort((a,b)=>{\r\n            if(a.check_in_status=='1' && b.check_in_status=='0')return 1;\r\n            if(a.check_in_status=='0' && b.check_in_status=='1')return -1;\r\n            return 0;\r\n        })\r\n        return students;\r\n    }\r\n\r\n    function approve(std) {\r\n        chState(std,1);\r\n    }\r\n\r\n    function fixStudentCode(code){\r\n        if(!code.match(/\\d{9}\\-\\d{1}/)){\r\n            return code.substr(0,9)+'-'+code.substr(-1)\r\n        }\r\n        return code;\r\n    }\r\n\r\n    async function reject(std) {\r\n        chState(std,0);\r\n    }\r\n\r\n    async function chState(std,state){\r\n        setLoadingBtn(prevState => ({...prevState,[std.StdRegistID]:true}))\r\n        await changeCheckInState(std.StdRegistID,state);\r\n        if(state==1){\r\n            toast.success(std.StudentID+' Approved.');\r\n        }else{\r\n            toast.success(std.StudentID+' Rejected.');\r\n        }\r\n        setTimeout(()=>{\r\n            setStudents(old => {\r\n                let existed = old.find(v=>v.Username==std.Username);\r\n                existed.check_in_status=state;\r\n                return sortState(old);\r\n            });\r\n            setLoadingBtn(prevState => ({...prevState,[std.StdRegistID]:false}))\r\n        },200);\r\n        clearTimeout(reloadStudentsTimer);\r\n        reloadStudentsTimer=setTimeout(async ()=>{\r\n            reloadStudents();\r\n        },2000);\r\n    }\r\n\r\n    function startGoogleMeet(){\r\n        setCopiedState(1);\r\n        setTimeout(()=>{\r\n            setCopiedState(2);\r\n            setTimeout(()=>{\r\n                window.open(\"https://meet.google.com\");\r\n                setCopiedState(3);\r\n            },2000);\r\n        },1000);\r\n\r\n    }\r\n\r\n    function getEmail(){\r\n        let emailText='';\r\n        students.map(std=>{\r\n            emailText+=std.email+',';\r\n        });\r\n        return emailText.substr(0,emailText.length-1);\r\n    }\r\n\r\n    async function broadcast(){\r\n        if(meetRoom.match(/meet.google.com\\//)){\r\n            await setMeetURL(SchdID,SchdDetailID,group,meetRoom);\r\n            setCopiedState(4);\r\n            toast.success(`Broadcast success.`);\r\n        }else{\r\n            toast.warn('Please fill Google meet link.')\r\n        }\r\n    }\r\n\r\n    async function pairUser(approve=false){\r\n        if(!userPairing) return;\r\n        let buffer=[];\r\n        Object.keys(userPairing).map(pair=>{\r\n            let student=userPairing[pair];\r\n            if(student){\r\n                let {Username,StudentID}=student;\r\n                buffer.push({\r\n                    approve,\r\n                    Username,\r\n                    avatar_name:pair,\r\n                    SchdID,\r\n                    SchdDetailID,\r\n                    group\r\n                });\r\n            }\r\n\r\n        })\r\n        await pairUserData(buffer);\r\n        setUserPairingText('');\r\n        reloadStudents();\r\n        if(approve){\r\n            toast.success('Pair user and approve success.')\r\n        }else{\r\n            toast.success('Pair user success.')\r\n        }\r\n    }\r\n\r\n    function pairUserAndApprove(){\r\n        confirmBox('Pair user and Approve',null,()=>{\r\n            pairUser(true);\r\n        })\r\n    }\r\n\r\n    return <div>\r\n        {\r\n            (schedule && students)\r\n                ? <>\r\n                    <Row>\r\n                        <Col>\r\n                            <div>\r\n                                <Form.Group>\r\n                                    {copiedState==4\r\n                                        ?\r\n                                        <Button variant=\"danger\" onClick={e=>{\r\n                                            confirmBox('Stop broadcast',null,()=>{\r\n                                                removeMeetURL(SchdID,SchdDetailID,group).then(()=>{\r\n                                                    setCopiedState(0);\r\n                                                    setMeetRoom('');\r\n                                                })\r\n                                            })\r\n                                        }}>Stop Google meet</Button>\r\n                                        :\r\n                                        <CopyToClipboard text={getEmail()}\r\n                                                          onCopy={()=>{startGoogleMeet()}}\r\n                                        >\r\n                                            <Button variant=\"primary\">Start Google meet</Button>\r\n                                        </CopyToClipboard>\r\n                                    }\r\n                                    {!!copiedState &&\r\n                                    <div>\r\n                                        {(copiedState==1 || copiedState==2) && <Alert variant=\"success\" className=\"mt-2 mb-1\">Copied email to clipboard.</Alert>}\r\n                                        {copiedState==2 && <Alert variant=\"warning\">Starting Google meet.</Alert>}\r\n                                        {copiedState==3 && <div>\r\n                                            <InputGroup className=\"mb-3 mt-4\" id=\"search\">\r\n                                                <InputGroup.Prepend>\r\n                                                    <InputGroup.Text id=\"basic-addon1\">Google meet URL</InputGroup.Text>\r\n                                                </InputGroup.Prepend>\r\n                                                <FormControl\r\n                                                    placeholder=\"meet.google.com/xxx-yyy-zzz\"\r\n                                                    value={meetRoom}\r\n                                                    onChange={e=>setMeetRoom(e.target.value)}\r\n                                                />\r\n                                                <InputGroup.Append>\r\n                                                    <Button variant=\"danger\" onClick={e=>{broadcast()}}>Broadcast</Button>\r\n                                                </InputGroup.Append>\r\n                                            </InputGroup>\r\n                                        </div>\r\n                                        }\r\n                                        {copiedState==4 &&\r\n                                        <>\r\n                                            <Alert variant=\"success\" className=\"mt-2\">Broadcasting... <Badge variant=\"danger\">{meetRoom}</Badge> to every client.</Alert>\r\n                                            <Row>\r\n                                                <Col md={6}>\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>User pairing tool</Form.Label>\r\n                                                        <Form.Control as=\"textarea\" rows={7} value={userPairingText} onChange={e=>setUserPairingText(e.target.value)}/>\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                                <Col md={6}>\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>User pairing results</Form.Label>\r\n                                                        {userPairing\r\n                                                            ?\r\n                                                            <Table>\r\n                                                                <thead>\r\n                                                                <tr>\r\n                                                                    <th>Code</th>\r\n                                                                    <th>Name</th>\r\n                                                                    <th>Google meet name</th>\r\n                                                                </tr>\r\n                                                                </thead>\r\n                                                                <tbody>\r\n                                                                {Object.keys(userPairing).map((pair,i)=>{\r\n                                                                    let student=userPairing[pair];\r\n                                                                   return  <tr key={student.StudentID+'_'+i}>\r\n                                                                       <td>{student.pairError\r\n                                                                           ?\r\n                                                                           <div>{student.StudentID}\r\n                                                                               <Badge className=\"ml-1\" variant=\"danger\">\r\n                                                                                   Existed -> {student.avatar_name}\r\n                                                                               </Badge>\r\n                                                                           </div>\r\n                                                                           :\r\n                                                                           student.StudentID}\r\n                                                                       </td>\r\n                                                                       <td>{student.FirstName_Th} {student.LastName_Th}</td>\r\n                                                                       <td>{pair}</td>\r\n                                                                   </tr>\r\n                                                                    })\r\n                                                                }\r\n                                                                </tbody>\r\n                                                            </Table>\r\n                                                            :\r\n                                                            <div>Waiting... input</div>\r\n\r\n                                                        }\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            {userPairing && Object.keys(userPairing).length>0 &&\r\n                                            <>\r\n                                                <Form.Group className=\"text-center\">\r\n                                                    <Button onClick={e=>pairUser()} className=\"mr-4\">Pair</Button>\r\n                                                    <Button onClick={e=>pairUserAndApprove()} variant=\"secondary\">Pair and approve</Button>\r\n                                                </Form.Group>\r\n                                            </>\r\n                                            }\r\n                                        </>\r\n                                        }\r\n                                    </div>\r\n                                    }\r\n                                    </Form.Group>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <Col xs={'auto'}>\r\n                                    <h3>นักศึกในกลุ่ม <span className=\"text-uppercase\">{group}</span></h3>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button variant=\"outline-secondary\" className=\"ml-2\" onClick={e=>setShowEmail(true)}>View email</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <div dangerouslySetInnerHTML={{__html:schedule.DateRegist_Desc_Th}}></div>\r\n                            <div>ภาค {schedule.ModuleType==1?<Badge variant=\"danger\">ทฤษฎี</Badge>:<Badge variant=\"info\">ปฏิบัติ</Badge>} ประจำวันที่ {schedule.ExamDate} / {schedule.ExamTimeStart}-{schedule.ExamTimeEnd}</div>\r\n                            <InputGroup className=\"mb-3 mt-4\" id=\"search\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon1\">ค้นหา</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                    placeholder=\"Code | Avatar name | FName | LName | Email\"\r\n                                    value={filter}\r\n                                    onChange={e=>setFilter(e.target.value)}\r\n                                />\r\n                                <InputGroup.Append>\r\n                                    <Button variant=\"dark\" onClick={e=>setFilter('')}>Reset</Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                            <Table className=\"sticky table-hover\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Picture</th>\r\n                                    <th>Code</th>\r\n                                    <th>Avatar name</th>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Status</th>\r\n                                    <th>Check In</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {\r\n                                    students && students\r\n                                        .filter(std=>{\r\n                                            if(!filter)return true;\r\n                                            let regExp=new RegExp(`${filter}`,'ig');\r\n                                            return (\r\n                                                std.StudentID.match(regExp)\r\n                                                || std.FirstName_Th.match(regExp)\r\n                                                || std.LastName_Th.match(regExp)\r\n                                                || std.email.match(regExp)\r\n                                                || (std.avatar_name && std.avatar_name.match(regExp))\r\n                                            )\r\n                                        })\r\n                                        .map((std, i) =>\r\n                                            <tr key={'std_'+i} className={std.check_in_status=='1' ? 'text-success text-white' : ''}>\r\n                                                <td>{i + 1}</td>\r\n                                                <td width=\"150\">\r\n                                                    {typeof state.studentPicture[std.Username] == 'undefined'?\r\n                                                        <Alert variant='info'>Loading...</Alert>\r\n                                                        :\r\n                                                        <>\r\n                                                            {state.studentPicture[std.Username]?\r\n                                                                <Image src={state.studentPicture[std.Username]} fluid rounded/>\r\n                                                                :\r\n                                                                <Image style={{opacity:'0.3'}} src='/images/user_avatar.svg' fluid rounded/>\r\n                                                            }\r\n                                                        </>\r\n                                                    }\r\n                                                </td>\r\n                                                <td style={{whiteSpace:'nowrap'}}>{std.StudentID}</td>\r\n                                                <td>{std.avatar_name?<strong variant='info' style={{fontSize:'110%'}}>{std.avatar_name}</strong>:'Not pair'}</td>\r\n                                                <td>{std.FirstName_Th} {std.LastName_Th}</td>\r\n                                                <td>{std.email}</td>\r\n                                                <td>\r\n                                                    {\r\n                                                        std.check_in_status=='1'\r\n                                                            ? <Badge variant=\"success\" className=\"ml-1\">Approved</Badge>\r\n                                                            : <Badge variant=\"info\" className=\"ml-1\">Waiting</Badge>\r\n                                                    }\r\n                                                    {\r\n                                                        std.IPAddress && <Badge variant=\"warning\" className=\"ml-1\">{std.IPAddress}</Badge>\r\n                                                    }\r\n                                                    <div>\r\n                                                        {\r\n                                                            std.IsStart && <Badge variant=\"secondary\" className=\"ml-1\">Logged In</Badge>\r\n                                                        }\r\n                                                        {\r\n                                                            std.IsEnd && <Badge variant=\"danger\" className=\"ml-1\">Exited</Badge>\r\n                                                        }\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {std.check_in_status=='1'\r\n                                                        ? <Button variant=\"danger\" type=\"button\" disabled={loadingBtn[std.StdRegistID]} onClick={reject.bind(this, std)}>Reject{loadingBtn[std.StdRegistID]?'...':''}</Button>\r\n                                                        : <Button variant=\"success\" type=\"button\" disabled={loadingBtn[std.StdRegistID]} onClick={approve.bind(this, std)}>Approve{loadingBtn[std.StdRegistID]?'...':''}</Button>\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                }\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                    <Modal show={showEmail} onHide={e=>setShowEmail(false)}>\r\n                        <Modal.Header closeButton>\r\n                            <span className=\"text-uppercase\">Email {group}:</span>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <Form.Control rows={20} as=\"textarea\" onChange={e=>{}} onClick={e=>e.target.select()} value={getEmail()}/>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={e=>setShowEmail(false)}>\r\n                                Close\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                    <ScrollToTop showUnder={160}>\r\n                        <img src=\"/images/up_arrow_round.png\"/>\r\n                    </ScrollToTop>\r\n                </>\r\n                : <div>Loading...</div>\r\n        }\r\n    </div>\r\n}\r\nexport default observer(ViewStudent);\r\n","C:\\Github\\ems_zoom\\src\\layouts\\full-layout.js",["177","178"],"import React from 'react';\r\nimport {Col, Container, Navbar, Row} from \"react-bootstrap\";\r\nimport TopMenu from \"../components/top-menu\";\r\nimport Footer from \"../components/footer\";\r\nimport {useParams,withRouter} from \"react-router-dom\";\r\n\r\nconst FullLayout = (props)=>{\r\n    const params = useParams();\r\n    return <>\r\n        <div className=\"container-wrapper\">\r\n            <TopMenu/>\r\n            <Container>\r\n                <Row>\r\n                    <Col>{props.children}</Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n        <Footer/>\r\n    </>\r\n}\r\nexport default withRouter(FullLayout);\r\n","C:\\Github\\ems_zoom\\src\\mobx\\mobx-store.js",["179","180"],"import {makeAutoObservable} from \"mobx\";\r\n\r\nclass MobxStore {\r\n    currentUser = void 0;\r\n    currentStudent = void 0;\r\n\r\n    scheduleMenu=[];\r\n\r\n    studentPicture={};\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setStudentPicture(Username,student_image_data){\r\n        this.studentPicture={\r\n            ...this.studentPicture,\r\n            [Username]:student_image_data\r\n        }\r\n    }\r\n\r\n    setUser(user) {\r\n        this.currentUser = user;\r\n    }\r\n\r\n    setStudent(student){\r\n        this.currentStudent=student;\r\n    }\r\n\r\n    studentApprove(code) {\r\n        let student = this.findStudent(code);\r\n        if (student) {\r\n            student.approved = true;\r\n        }\r\n    }\r\n\r\n    studentReject(code) {\r\n        let student = this.findStudent(code);\r\n        if (student) {\r\n            student.approved = false;\r\n        }\r\n    }\r\n    findStudent(code) {\r\n        let student = void 0;\r\n        Object.keys(this.students).map(group => {\r\n            if (!student) student = this.students[group].find(std => std.code == code);\r\n        })\r\n        return student;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default MobxStore;\r\n","C:\\Github\\ems_zoom\\src\\components\\services.js",["181","182","183","184"],"import axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport {confirmAlert} from \"react-confirm-alert\";\r\nimport {mobxStore} from \"../App\";\r\n\r\nexport function getSchedules(month,year){\r\n    return  new Promise(resolve => {\r\n        axios.post('/check_in_resful_api.php?method=schedule',{m:parseInt(month),y:parseInt(year)})\r\n            .then(res=>{\r\n               let resultWithGroup={};\r\n               res.data.results.sort((a,b)=>{\r\n                  let aDate = moment(a.ExamDate);\r\n                  let bDate = moment(b.ExamDate);\r\n                   if(aDate==bDate)return 0;\r\n                   if(aDate>bDate)return 1;\r\n                   return -1;\r\n               });\r\n               res.data.results.map(schd=>{\r\n                    schd = tranformScheduleDate(schd);\r\n                    if(!resultWithGroup[schd.ExamDate])resultWithGroup[schd.ExamDate]=[];\r\n                    resultWithGroup[schd.ExamDate].push(schd);\r\n                });\r\n                Object.keys(resultWithGroup).map(key=>{\r\n                    resultWithGroup[key].sort((a,b)=>{\r\n                        let aDate = parseInt(a.ExamTimeStart);\r\n                        let bDate = parseInt(b.ExamTimeEnd);\r\n                        if(aDate==bDate)return 0;\r\n                        if(aDate>bDate)return 1;\r\n                        return -1;\r\n                    })\r\n                })\r\n                console.log(resultWithGroup);\r\n                resolve(resultWithGroup);\r\n            })\r\n    })\r\n}\r\n\r\nexport function getEmailByScheduleDetail(SchdID,SchdDetailID){\r\n    return new Promise(resolve => {\r\n        axios.post('/check_in_resful_api.php?method=students',{SchdID,SchdDetailID})\r\n            .then(res=>{\r\n                let {data} = res;\r\n                resolve(data);\r\n            }).catch(e=>{\r\n                resolve(null)\r\n        });\r\n    })\r\n}\r\n\r\nexport function getScheduleInfo(SchdID,SchdDetailID){\r\n    return new Promise(async resolve => {\r\n        let schedule = await request('schedule-info',{SchdID,SchdDetailID});\r\n        schedule = tranformScheduleDate(schedule);\r\n        resolve(schedule);\r\n    });\r\n}\r\n\r\nexport function getCheckInStudents(SchdID,SchdDetailID,group){\r\n    return request('get-check-in-students',{SchdID,SchdDetailID,group})\r\n}\r\n\r\nexport function changeCheckInState(StdRegistID,state){\r\n    return request('change-state',{StdRegistID,state})\r\n}\r\n\r\nexport function getMeetURL(SchdID, SchdDetailID,group){\r\n    return request('get-meet-url',{SchdID,SchdDetailID,group})\r\n}\r\n\r\nexport function setMeetURL(SchdID, SchdDetailID,group,url){\r\n    return request('set-meet-url',{SchdID,SchdDetailID,group,url})\r\n}\r\n\r\nexport function removeMeetURL(SchdID, SchdDetailID,group){\r\n    return request('remove-meet-url',{SchdID,SchdDetailID,group})\r\n}\r\n\r\nexport function pairUserData(pairData=[]){\r\n    return request('pair-user',{pairData})\r\n}\r\n\r\nexport function checkLogin(){\r\n    return request('check-login')\r\n}\r\n\r\nexport function userLogout(){\r\n    return request('logout')\r\n}\r\n\r\nexport function userLogin(username,password){\r\n    return request('login',{username,password})\r\n}\r\n\r\nexport function confirmBox(title,detail,fn){\r\n    confirmAlert({\r\n        title:title,\r\n        message:detail?detail:'Do you want to do?',\r\n        buttons:[\r\n            {\r\n                label: 'Yes',\r\n                onClick: () => fn()\r\n            },\r\n            {\r\n                label: 'No',\r\n            }\r\n        ]\r\n    });\r\n}\r\n\r\nexport function tranformScheduleDate(schedule){\r\n    schedule.ExamDate=schedule.ExamDate.split(' ')[0];\r\n    schedule.ExamTimeStart=schedule.ExamTimeStart.split(' ')[1];\r\n    schedule.ExamTimeEnd=schedule.ExamTimeEnd.split(' ')[1];\r\n    return schedule;\r\n}\r\n\r\nexport async function loadStudentPicture(Username){\r\n    if(!mobxStore.studentPicture[Username]){\r\n        let results = await request('get-student-picture',{Username});\r\n        if(results){\r\n            mobxStore.setStudentPicture(Username,results.student_image_data);\r\n        }else{\r\n            mobxStore.setStudentPicture(Username,null);\r\n        }\r\n    }\r\n}\r\n\r\nfunction request(method,params={}){\r\n    return new Promise(resolve => {\r\n        axios.post('/check_in_resful_api.php?method='+method,params)\r\n            .then(res=>{\r\n                resolve(res.data);\r\n            }).catch(e=>{\r\n                document.location.href='/login'\r\n            // resolve(null)\r\n        });\r\n    })\r\n}\r\n","C:\\Github\\ems_zoom\\src\\client-ui\\workshop.js",["185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"import {Alert, Badge, Button, Card, Col, Container, FormControl, Modal, Nav, Navbar, Row} from \"react-bootstrap\";\r\nimport Footer from \"../components/footer\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Form} from \"formik\";\r\nimport {download, getWorkshopQuestion, getWorkshopUser, uploadWorkshopFile} from \"../client-components/client-services\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faFileWord, faFileExcel, faFilePowerpoint, faDatabase, faCheckCircle} from '@fortawesome/free-solid-svg-icons'\r\nimport classNames from \"classnames\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\n//http://localhost:3000/exam/workshop/125180/3474\r\n\r\n\r\nconst Workshop = () => {\r\n    const [questions, setQuestions] = useState();\r\n    const [filter, setFilter] = useState('1');\r\n    const [currentUserWorkshop, setCurrentUserWorkshop] = useState(null);\r\n    const [showConfirmSubmit, setShowConfirmSubmit] = useState(false);\r\n    const {StdRegistID, SchdDetailID} = useParams();\r\n\r\n    useEffect(() => {\r\n        getWorkshopQuestion(StdRegistID, SchdDetailID).then(data => setQuestions(data))\r\n        reloadWorkshopFile();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n    }, [filter]);\r\n\r\n    function getPracticeName(PracticeID, size) {\r\n        switch (PracticeID) {\r\n            case '1':\r\n                return {\r\n                    name: 'Microsoft Word',\r\n                    icon: <FontAwesomeIcon style={{fontSize: size}} icon={faFileWord}/>,\r\n                    color: '#0062cc',\r\n                    class: 'primary',\r\n                };\r\n            case '2':\r\n                return {\r\n                    name: 'Microsoft Excel',\r\n                    icon: <FontAwesomeIcon style={{fontSize: size}} icon={faFileExcel}/>,\r\n                    color: '#1e7e34',\r\n                    class: 'success',\r\n                };\r\n            case '3':\r\n                return {\r\n                    name: 'Microsoft Powerpoint',\r\n                    icon: <FontAwesomeIcon style={{fontSize: size}} icon={faFilePowerpoint}/>,\r\n                    color: '#d39e00',\r\n                    class: 'warning',\r\n                };\r\n            case '4':\r\n                return {\r\n                    name: 'Microsoft Access',\r\n                    icon: <FontAwesomeIcon style={{fontSize: size}} icon={faDatabase}/>,\r\n                    color: '#ea2971',\r\n                    class: 'danger',\r\n                };\r\n        }\r\n    }\r\n\r\n    function reloadWorkshopFile() {\r\n        getWorkshopUser(StdRegistID, SchdDetailID).then(data => setCurrentUserWorkshop(data));\r\n    }\r\n\r\n    function uploadFile(e) {\r\n        let file = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append('file', file, file.name);\r\n        formData.append('StdRegistID', StdRegistID);\r\n        formData.append('SchdDetailID', SchdDetailID);\r\n        uploadWorkshopFile(formData);\r\n    }\r\n\r\n    async function confirmSubmit() {\r\n        await reloadWorkshopFile();\r\n        setShowConfirmSubmit(true);\r\n    }\r\n\r\n    return <>\r\n        {(questions && currentUserWorkshop)\r\n            ?\r\n            <div className=\"container-wrapper\" style={{paddingLeft: '120px'}}>\r\n                <div className=\"exam-sidebar\">\r\n                    <ul>\r\n                        {questions.map((q, i) => {\r\n                            let icon;\r\n                            let color;\r\n                            switch (q.PracticeID) {\r\n                                case '1':\r\n                                    icon = faFileWord;\r\n                                    color = '#0062cc';\r\n                                    break;\r\n                                case '2':\r\n                                    icon = faFileExcel;\r\n                                    color = '#1e7e34';\r\n                                    break;\r\n                                case '3':\r\n                                    icon = faFilePowerpoint;\r\n                                    color = '#d39e00';\r\n                                    break;\r\n                                case '4':\r\n                                    icon = faDatabase;\r\n                                    color = '#ea2971';\r\n                                    break;\r\n                            }\r\n                            return (\r\n                                <li key={'q_' + i} style={{cursor: 'pointer', background: color}} className={\r\n                                    classNames({\r\n                                        'exam-workshop-active': filter == q.PracticeID,\r\n                                        'exam-word-color': q.PracticeID == 1,\r\n                                        'exam-excel-color': q.PracticeID == 2,\r\n                                        'exam-powerpoint-color': q.PracticeID == 3,\r\n                                        'exam-access-color': q.PracticeID == 4,\r\n                                    })} onClick={e => setFilter(q.PracticeID)}>\r\n                                    <span className=\"mr-1\">{i + 1}.</span><FontAwesomeIcon style={{fontSize: '50px'}}\r\n                                                                                           icon={icon}/>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                <Container className=\"exam-container\">\r\n                    <div className=\"exam-top-menu\">\r\n                        <Navbar bg=\"light\" expand=\"md\">\r\n                            <Navbar.Brand href=\"#home\">EMS KKU - Workshop</Navbar.Brand>\r\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                            <Navbar.Collapse>\r\n                                <Nav className=\"mr-auto\">\r\n                                    <Nav.Link href=\"#home\">\r\n                                        <Button variant='primary' onClick={e => confirmSubmit()}>Submit and\r\n                                            exit</Button>\r\n                                    </Nav.Link>\r\n                                </Nav>\r\n                                <Nav className=\"ml-auto\">\r\n\r\n                                    <Nav.Link href=\"#link\">\r\n                                        <div>\r\n                                            <Badge className=\"mr-2\">\r\n                                                <span className=\"mr-2\">{currentUserWorkshop.student.StudentID}</span>\r\n                                                <span className=\"mr-2\">|</span>\r\n                                                <span>{currentUserWorkshop.student.FirstName_Th} {currentUserWorkshop.student.LastName_Th}</span>\r\n                                            </Badge>\r\n                                            <Button variant=\"danger\">Logout</Button>\r\n                                        </div>\r\n                                    </Nav.Link>\r\n                                </Nav>\r\n                            </Navbar.Collapse>\r\n                        </Navbar>\r\n                    </div>\r\n                    <div className=\"exam-content\">\r\n                        <Card className={classNames(' mb-4', {\r\n                            'bg-primary text-light': filter == '1',\r\n                            'bg-success text-light': filter == '2',\r\n                            'bg-warning text-dark': filter == '3',\r\n                            'bg-danger text-light': filter == '4',\r\n                        })}>\r\n                            <Card.Header>Your workshop documents {(() => {\r\n                                switch (filter) {\r\n                                    case '1':\r\n                                        return <strong>Microsoft Word</strong>;\r\n                                    case '2':\r\n                                        return <strong>Microsoft Excel</strong>;\r\n                                    case '3':\r\n                                        return <strong>Microsoft Powerpoint</strong>;\r\n                                    case '4':\r\n                                        return <strong>Microsoft Access</strong>;\r\n                                }\r\n                            })()}</Card.Header>\r\n                            <Card.Body>\r\n                                {\r\n                                    (() => {\r\n                                        let existed = currentUserWorkshop['practice_answer'].find(v => v.PracticeID == filter);\r\n                                        if (existed) {\r\n                                            return <Badge variant='light' style={{fontSize: '15px'}}>\r\n                                                <Button variant='light' onClick={e => download(existed.RowID)}>\r\n                                                    <FontAwesomeIcon style={{fontSize: '20px'}} className='mr-1'\r\n                                                                     icon={faCheckCircle}/>\r\n                                                    <span>{existed.FileName}</span>\r\n                                                </Button>\r\n                                            </Badge>\r\n                                        } else {\r\n                                            return <span>After you finish please upload your file here.</span>\r\n                                        }\r\n                                    })()\r\n                                }\r\n                            </Card.Body>\r\n                            <Card.Footer className=\"bg-dark text-light\">\r\n                                <strong className=\"mr-4\">Upload document for score:</strong>\r\n                                <input type='file' onChange={e => uploadFile(e)}/>\r\n                            </Card.Footer>\r\n                        </Card>\r\n                        <div>\r\n                            {\r\n                                questions.filter(question => question.PracticeID == filter).map((question, i) => {\r\n                                    let practice = getPracticeName(question.PracticeID);\r\n                                    return <Row key={'question_' + i}>\r\n                                        <Col>\r\n                                            <div className=\"mb-4\">\r\n                                                <Card>\r\n                                                    <Card.Header>\r\n                                                        <Card.Text>\r\n                                                            <h4 style={{color: practice.color}}>{practice.icon} {practice.name} Questions</h4>\r\n                                                        </Card.Text>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body style={{overflowX: 'auto'}}>\r\n                                                        <div\r\n                                                            dangerouslySetInnerHTML={{__html: question.PracticeQuestionTh}}></div>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Container>\r\n                <Modal className='exam-confirm-modal' size='lg' show={showConfirmSubmit} onHide={e => setShowConfirmSubmit(false)}>\r\n                    <Modal.Header closeButton>\r\n                        <span className=\"text-uppercase\">Confirm to submit</span>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className='mb-2'><strong>Uploaded file:</strong></div>\r\n                        {\r\n                            currentUserWorkshop.practice_answer.map(answer => {\r\n                                let practice = getPracticeName(answer.PracticeID);\r\n                                return <Alert variant={practice.class}>\r\n                                    <strong className='mr-2'>{practice.icon} {practice.name}</strong>\r\n                                    <a href='#' className={'text-'+practice.class} onClick={e=>{e.preventDefault();download(answer.RowID)}}>{answer.FileName}</a>\r\n                                </Alert>\r\n                            })\r\n                        }\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={e => setShowConfirmSubmit(false)}>\r\n                            Yes, Submit and exit\r\n                        </Button>\r\n                        <Button variant=\"secondary\" onClick={e => setShowConfirmSubmit(false)}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n            :\r\n            <Alert variant='info'>Loading...</Alert>\r\n        }\r\n    </>\r\n}\r\nexport default Workshop;\r\n","C:\\Github\\ems_zoom\\src\\client-ui\\theory.js",[],"C:\\Github\\ems_zoom\\src\\client-ui\\exam.js",["204","205","206","207","208","209"],"C:\\Github\\ems_zoom\\src\\client-ui\\client-home.js",[],"C:\\Github\\ems_zoom\\src\\components\\schedule.js",["210","211","212","213","214","215"],"import {Alert, Badge, Button, Card, Col, Row, Modal, Form} from \"react-bootstrap\";\r\nimport {observer} from \"mobx-react\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Config from \"../config\";\r\nimport {getEmailByScheduleDetail, getSchedules} from \"./services\";\r\nimport {$mobx} from \"mobx\";\r\n\r\nconst Schedule = ({month,year}) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [studentsWithGroup, setStudentsWithGroup] = useState(null);\r\n    const [schedules,setSchedules] = useState(null);\r\n    const state = useContext(StateContext);\r\n\r\n    useEffect(()=>{\r\n        state.scheduleMenu=[];\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n       getSchedules(month,year).then(results=>{\r\n           setSchedules(results);\r\n       });\r\n    },[month,year]);\r\n\r\n    async function showEmail(schd){\r\n        let studentsWithGroup = await getEmailByScheduleDetail(schd.SchdID,schd.SchdDetailID);\r\n        setStudentsWithGroup(studentsWithGroup);\r\n        setShowModal(true);\r\n    }\r\n    function hideModal(){\r\n        setStudentsWithGroup(null);\r\n        setShowModal(false);\r\n    }\r\n    return <>\r\n        <h3>รอบสอบของ ปี {year}</h3>\r\n        {\r\n            schedules && Object.keys(schedules).map(day => {\r\n                return (\r\n                    <Card key={day} className=\"mt-2\">\r\n                        <Card.Header>\r\n                            <Card.Text>การสอบวันที่ {day}</Card.Text>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row>\r\n                                {schedules[day].map((schd,i) =>\r\n                                    <SchdBlock key={`${schd.examDate}_${i}`} schd={schd} onEmail={showEmail.bind(this,schd)}/>\r\n                                )}\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            })\r\n        }\r\n        <Modal show={showModal} onHide={hideModal}>\r\n            <Modal.Header closeButton>\r\n                {studentsWithGroup\r\n                    ?<Modal.Title>Email ในรอบสอบ {studentsWithGroup.title}</Modal.Title>\r\n                    :<Modal.Title>Loading...</Modal.Title>\r\n                }\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {\r\n                    studentsWithGroup\r\n                        ?<>\r\n                            {\r\n                                Object.keys(studentsWithGroup).map(group=>{\r\n                                    let emailText='';\r\n                                    return <div key={group}>\r\n                                        <h3 style={{textTransform:'capitalize'}}>{group}</h3>\r\n                                        {\r\n                                            studentsWithGroup[group].map(std=>{\r\n                                                emailText+=`${std.RegKKU.KKUMAIL},`\r\n                                            })\r\n                                        }\r\n                                        <Form.Control rows={5} as='textarea'\r\n                                                      onChange={e=>{}}\r\n                                                      onClick={e=>e.target.select()}\r\n                                                      value={emailText.substr(0,emailText.length-1)}/>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </>\r\n                        :<div>Loading....</div>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hideModal}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={hideModal}>\r\n                    Save Changes\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </>\r\n}\r\n\r\n\r\nconst SchdBlock = ({schd,onEmail}) => {\r\n    const history = useHistory();\r\n    return <Col md={4}>\r\n        <div style={{padding: '10px'}}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title>\r\n                        <small>{schd.ExamTimeStart}-{schd.ExamTimeEnd}</small>\r\n                    </Card.Title>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <div className=\"text-center\">\r\n                    {schd.ModuleType==\"1\"?<Alert variant=\"danger\">ทฤษฎี</Alert>:<Alert variant=\"info\">ปฏิบัติ</Alert>}\r\n                        <div className=\"text-center\">\r\n                            <Button className=\"ml-2\" onClick={e => history.push(Config.adminPath(`/schedule/${schd.SchdID}/${schd.SchdDetailID}`))}>Enter</Button>\r\n                            <Button variant=\"secondary\" className=\"ml-2\" onClick={onEmail}>Email</Button>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <Card.Text className=\"text-right\">Student: {schd.studentCount}</Card.Text>\r\n                </Card.Footer>\r\n            </Card>\r\n        </div>\r\n    </Col>\r\n}\r\n\r\nexport default observer(Schedule);\r\n","C:\\Github\\ems_zoom\\src\\components\\top-menu.js",["216","217","218","219","220"],"import {observer} from \"mobx-react\";\r\nimport {useContext} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {useLocation,NavLink,useParams,withRouter,useHistory} from 'react-router-dom';\r\nimport {Badge, Button} from \"react-bootstrap\";\r\nimport {userLogout} from \"./services\";\r\nimport Config from \"../config\";\r\n\r\n\r\nconst TopMenu=(props)=>{\r\n    const state = useContext(StateContext);\r\n    const history = useHistory();\r\n    const params = useParams();\r\n    async function logout(){\r\n        await userLogout();\r\n        state.setUser(null);\r\n        history.push(Config.adminPath('/login'));\r\n    }\r\n    return <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Ems Check-in</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n                aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink className=\"nav-link\" to={Config.adminPath()} exact>Schedule</NavLink>\r\n                </li>\r\n                {\r\n                    state.scheduleMenu.map(mn=>\r\n                        <li key={mn.title} className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to={Config.adminPath(mn.to)} exact>-> {mn.title}</NavLink>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink className=\"nav-link\" to=\"/\" exact>\r\n                        Username: <strong className=\"mr-2\">{state.currentUser.username}</strong><Button variant=\"danger\" onClick={e=>{logout()}}>Logout</Button>\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n}\r\nexport default observer(TopMenu);\r\n","C:\\Github\\ems_zoom\\src\\components\\footer.js",["221"],"import {Container} from \"react-bootstrap\";\r\n\r\nconst Footer=()=>{\r\n    return <div className=\"footer\">\r\n        <div style={{padding:'10px'}}></div>\r\n    </div>\r\n}\r\nexport default Footer;\r\n","C:\\Github\\ems_zoom\\src\\client-components\\client-services.js",[],"C:\\Github\\ems_zoom\\src\\client-components\\check-in-process.js",["222","223","224","225","226","227","228"],"C:\\Github\\ems_zoom\\src\\client-components\\exam-schedule-day.js",["229","230"],"import Header from \"./header\";\r\nimport {Badge, Button, Card, Col, Container, Row} from \"react-bootstrap\";\r\nimport classNames from 'classnames'\r\nconst striptags = require('striptags');\r\n\r\nconst ExamScheduleDay = ({schedules})=>{\r\n    console.log(schedules);\r\n    if(!schedules)return <div>Loading...</div>\r\n    return <div>\r\n        <Header/>\r\n        <Container className=\"mt-4\">\r\n            <Row>\r\n                {\r\n                    schedules.map(schd=>{\r\n                        return <Col key={schd.SchdDetailID} md={6} className=\"mb-2\">\r\n                            <Card>\r\n                                <Card.Header>\r\n                                    <div>{striptags(schd.DateRegist_Desc_Th)}</div>\r\n                                </Card.Header>\r\n                                <Card.Body>\r\n                                    {schd.ModuleType=='1'?\r\n                                        <Badge variant='danger' className=\"mr-2\">Theory</Badge>\r\n                                        :\r\n                                        <Badge variant='info' className=\"mr-2\">Workshop</Badge>\r\n                                    }\r\n                                    <span>{schd.ExamDate} / {schd.ExamTimeStart}-{schd.ExamTimeEnd}</span>\r\n                                </Card.Body>\r\n                                <Card.Footer>\r\n                                    <div className=\"text-right\">\r\n                                        <Button variant='primary' className=\"ml-auto\">Start Exam</Button>\r\n                                    </div>\r\n                                </Card.Footer>\r\n                            </Card>\r\n                        </Col>\r\n                    })\r\n                }\r\n            </Row>\r\n        </Container>\r\n    </div>\r\n}\r\nexport default ExamScheduleDay;","C:\\Github\\ems_zoom\\src\\client-ui\\login-client.js",[],"C:\\Github\\ems_zoom\\src\\ui\\admin.js",["231"],"import FullLayout from \"../layouts/full-layout\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Home from \"./home\";\r\nimport ViewGroup from \"./view-group\";\r\nimport ViewStudent from \"./view-student\";\r\nimport Login from \"./login\";\r\nimport {observer} from \"mobx-react\";\r\nimport {useContext, useEffect} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport Config from \"../config\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport {checkLogin} from \"../components/services\";\r\n\r\nlet timer;\r\nconst Admin = ()=>{\r\n    const state = useContext(StateContext);\r\n    let {adminPath} = Config;\r\n    useEffect(() => {\r\n        checker();\r\n        timer=setInterval(() => {\r\n            checker()\r\n        }, 5 * 60000)\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n    }, []);\r\n    function checker() {\r\n        checkLogin().then(user => {\r\n            if (user) {\r\n                state.setUser(user);\r\n            } else {\r\n                state.setUser(null);\r\n            }\r\n        })\r\n    }\r\n    if (typeof state.currentUser == 'undefined') return <Alert variant='info'>Loading...</Alert>\r\n    return <>\r\n        {state.currentUser\r\n            ?\r\n            <FullLayout>\r\n                <Switch>\r\n                    <Route path={adminPath()} exact component={Home}/>\r\n                    <Route path={adminPath('/schedule/:SchdID(\\\\d+)/:SchdDetailID(\\\\d+)')} exact\r\n                           component={ViewGroup}/>\r\n                    <Route path={adminPath('/schedule/:SchdID(\\\\d+)/:SchdDetailID(\\\\d+)/:group')}\r\n                           component={ViewStudent}/>\r\n                </Switch>\r\n            </FullLayout>\r\n            :\r\n            <Switch>\r\n                <Route path=\"*\" component={Login}/>\r\n            </Switch>\r\n        }\r\n    </>\r\n}\r\nexport default observer(Admin);","C:\\Github\\ems_zoom\\src\\client-ui\\student.js",["232","233","234"],"import {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport Exam from \"./exam\";\r\nimport ClientHome from \"./client-home\";\r\nimport LoginClient from \"./login-client\";\r\nimport {useContext, useEffect} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {checkLogin} from \"../client-components/client-services\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nlet timer;\r\nconst Student = ()=>{\r\n    const state = useContext(StateContext);\r\n    useEffect(() => {\r\n        checker();\r\n        timer=setInterval(() => {\r\n            checker()\r\n        }, 5 * 60000)\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n    }, []);\r\n    function checker() {\r\n        checkLogin().then(user => {\r\n            if (user) {\r\n                state.setStudent(user);\r\n            } else {\r\n                state.setStudent(null);\r\n            }\r\n        })\r\n    }\r\n    if (typeof state.currentStudent == 'undefined') return <Alert variant='info'>Loading...</Alert>\r\n    return <>\r\n        {state.currentStudent\r\n            ?\r\n            <Switch>\r\n                <Route path=\"/\" exact component={ClientHome}/>\r\n                <Route path=\"/exam\" exact exact component={Exam}/>\r\n                <Route path=\"/exam/:type/:StdRegistID/:SchdDetailID\" component={Exam}/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                <Route path=\"/\" exact component={ClientHome}/>\r\n                <Route path=\"*\" component={LoginClient}/>\r\n            </Switch>\r\n        }\r\n    </>\r\n}\r\nexport default observer(Student);","C:\\Github\\ems_zoom\\src\\client-components\\header.js",[],{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"240","line":2,"column":36,"nodeType":"241","messageId":"242","endLine":2,"endColumn":44},{"ruleId":"239","severity":1,"message":"243","line":3,"column":8,"nodeType":"241","messageId":"242","endLine":3,"endColumn":13},{"ruleId":"239","severity":1,"message":"244","line":7,"column":8,"nodeType":"241","messageId":"242","endLine":7,"endColumn":12},{"ruleId":"239","severity":1,"message":"245","line":8,"column":8,"nodeType":"241","messageId":"242","endLine":8,"endColumn":18},{"ruleId":"239","severity":1,"message":"246","line":9,"column":8,"nodeType":"241","messageId":"242","endLine":9,"endColumn":17},{"ruleId":"239","severity":1,"message":"247","line":10,"column":8,"nodeType":"241","messageId":"242","endLine":10,"endColumn":19},{"ruleId":"239","severity":1,"message":"248","line":11,"column":25,"nodeType":"241","messageId":"242","endLine":11,"endColumn":30},{"ruleId":"239","severity":1,"message":"249","line":14,"column":9,"nodeType":"241","messageId":"242","endLine":14,"endColumn":18},{"ruleId":"239","severity":1,"message":"250","line":15,"column":9,"nodeType":"241","messageId":"242","endLine":15,"endColumn":19},{"ruleId":"239","severity":1,"message":"251","line":16,"column":9,"nodeType":"241","messageId":"242","endLine":16,"endColumn":14},{"ruleId":"239","severity":1,"message":"252","line":18,"column":8,"nodeType":"241","messageId":"242","endLine":18,"endColumn":16},{"ruleId":"239","severity":1,"message":"253","line":19,"column":8,"nodeType":"241","messageId":"242","endLine":19,"endColumn":18},{"ruleId":"239","severity":1,"message":"254","line":20,"column":8,"nodeType":"241","messageId":"242","endLine":20,"endColumn":14},{"ruleId":"239","severity":1,"message":"255","line":21,"column":8,"nodeType":"241","messageId":"242","endLine":21,"endColumn":12},{"ruleId":"239","severity":1,"message":"256","line":22,"column":8,"nodeType":"241","messageId":"242","endLine":22,"endColumn":19},{"ruleId":"239","severity":1,"message":"257","line":29,"column":9,"nodeType":"241","messageId":"242","endLine":29,"endColumn":17},{"ruleId":"239","severity":1,"message":"258","line":4,"column":8,"nodeType":"241","messageId":"242","endLine":4,"endColumn":13},{"ruleId":"259","severity":1,"message":"260","line":26,"column":7,"nodeType":"261","endLine":26,"endColumn":9,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":31,"column":41,"nodeType":"265","messageId":"266","endLine":31,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":40,"column":38,"nodeType":"269","messageId":"270","endLine":40,"endColumn":40},{"ruleId":"239","severity":1,"message":"271","line":6,"column":9,"nodeType":"241","messageId":"242","endLine":6,"endColumn":15},{"ruleId":"239","severity":1,"message":"272","line":7,"column":10,"nodeType":"241","messageId":"242","endLine":7,"endColumn":13},{"ruleId":"239","severity":1,"message":"273","line":13,"column":5,"nodeType":"241","messageId":"242","endLine":13,"endColumn":29},{"ruleId":"239","severity":1,"message":"274","line":17,"column":10,"nodeType":"241","messageId":"242","endLine":17,"endColumn":22},{"ruleId":"259","severity":1,"message":"275","line":54,"column":8,"nodeType":"261","endLine":54,"endColumn":10,"suggestions":"276"},{"ruleId":"263","severity":1,"message":"277","line":62,"column":25,"nodeType":"265","messageId":"278","endLine":62,"endColumn":27},{"ruleId":"267","severity":1,"message":"268","line":65,"column":32,"nodeType":"269","messageId":"270","endLine":65,"endColumn":34},{"ruleId":"267","severity":1,"message":"268","line":65,"column":48,"nodeType":"269","messageId":"270","endLine":65,"endColumn":50},{"ruleId":"263","severity":1,"message":"264","line":65,"column":57,"nodeType":"279","messageId":"280","endLine":65,"endColumn":64},{"ruleId":"267","severity":1,"message":"268","line":72,"column":71,"nodeType":"269","messageId":"270","endLine":72,"endColumn":73},{"ruleId":"267","severity":1,"message":"281","line":75,"column":78,"nodeType":"269","messageId":"270","endLine":75,"endColumn":80},{"ruleId":"259","severity":1,"message":"282","line":88,"column":7,"nodeType":"261","endLine":88,"endColumn":24,"suggestions":"283"},{"ruleId":"263","severity":1,"message":"264","line":92,"column":24,"nodeType":"265","messageId":"266","endLine":92,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":101,"column":33,"nodeType":"269","messageId":"270","endLine":101,"endColumn":35},{"ruleId":"267","severity":1,"message":"268","line":101,"column":59,"nodeType":"269","messageId":"270","endLine":101,"endColumn":61},{"ruleId":"267","severity":1,"message":"268","line":102,"column":33,"nodeType":"269","messageId":"270","endLine":102,"endColumn":35},{"ruleId":"267","severity":1,"message":"268","line":102,"column":59,"nodeType":"269","messageId":"270","endLine":102,"endColumn":61},{"ruleId":"284","severity":1,"message":"285","line":113,"column":30,"nodeType":"286","messageId":"287","endLine":113,"endColumn":31,"suggestions":"288"},{"ruleId":"267","severity":1,"message":"268","line":126,"column":17,"nodeType":"269","messageId":"270","endLine":126,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":133,"column":53,"nodeType":"269","messageId":"270","endLine":133,"endColumn":55},{"ruleId":"263","severity":1,"message":"264","line":159,"column":25,"nodeType":"265","messageId":"266","endLine":159,"endColumn":27},{"ruleId":"263","severity":1,"message":"264","line":178,"column":42,"nodeType":"265","messageId":"266","endLine":178,"endColumn":44},{"ruleId":"239","severity":1,"message":"289","line":181,"column":31,"nodeType":"241","messageId":"242","endLine":181,"endColumn":40},{"ruleId":"267","severity":1,"message":"268","line":217,"column":49,"nodeType":"269","messageId":"270","endLine":217,"endColumn":51},{"ruleId":"267","severity":1,"message":"268","line":236,"column":54,"nodeType":"269","messageId":"270","endLine":236,"endColumn":56},{"ruleId":"267","severity":1,"message":"268","line":236,"column":72,"nodeType":"269","messageId":"270","endLine":236,"endColumn":74},{"ruleId":"267","severity":1,"message":"268","line":237,"column":53,"nodeType":"269","messageId":"270","endLine":237,"endColumn":55},{"ruleId":"267","severity":1,"message":"268","line":238,"column":53,"nodeType":"269","messageId":"270","endLine":238,"endColumn":55},{"ruleId":"267","severity":1,"message":"268","line":254,"column":53,"nodeType":"269","messageId":"270","endLine":254,"endColumn":55},{"ruleId":"267","severity":1,"message":"268","line":332,"column":58,"nodeType":"269","messageId":"270","endLine":332,"endColumn":60},{"ruleId":"267","severity":1,"message":"268","line":374,"column":94,"nodeType":"269","messageId":"270","endLine":374,"endColumn":96},{"ruleId":"267","severity":1,"message":"268","line":395,"column":76,"nodeType":"269","messageId":"270","endLine":395,"endColumn":78},{"ruleId":"267","severity":1,"message":"268","line":412,"column":73,"nodeType":"269","messageId":"270","endLine":412,"endColumn":75},{"ruleId":"290","severity":1,"message":"291","line":438,"column":25,"nodeType":"292","endLine":438,"endColumn":64},{"ruleId":"239","severity":1,"message":"293","line":2,"column":25,"nodeType":"241","messageId":"242","endLine":2,"endColumn":31},{"ruleId":"239","severity":1,"message":"294","line":8,"column":11,"nodeType":"241","messageId":"242","endLine":8,"endColumn":17},{"ruleId":"263","severity":1,"message":"264","line":45,"column":46,"nodeType":"265","messageId":"266","endLine":45,"endColumn":48},{"ruleId":"267","severity":1,"message":"268","line":46,"column":79,"nodeType":"269","messageId":"270","endLine":46,"endColumn":81},{"ruleId":"267","severity":1,"message":"268","line":14,"column":28,"nodeType":"269","messageId":"270","endLine":14,"endColumn":30},{"ruleId":"263","severity":1,"message":"264","line":18,"column":41,"nodeType":"265","messageId":"266","endLine":18,"endColumn":43},{"ruleId":"263","severity":1,"message":"264","line":23,"column":53,"nodeType":"265","messageId":"266","endLine":23,"endColumn":55},{"ruleId":"267","severity":1,"message":"268","line":27,"column":33,"nodeType":"269","messageId":"270","endLine":27,"endColumn":35},{"ruleId":"239","severity":1,"message":"295","line":1,"column":53,"nodeType":"241","messageId":"242","endLine":1,"endColumn":64},{"ruleId":"239","severity":1,"message":"296","line":2,"column":8,"nodeType":"241","messageId":"242","endLine":2,"endColumn":14},{"ruleId":"239","severity":1,"message":"297","line":4,"column":9,"nodeType":"241","messageId":"242","endLine":4,"endColumn":13},{"ruleId":"259","severity":1,"message":"298","line":25,"column":8,"nodeType":"261","endLine":25,"endColumn":10,"suggestions":"299"},{"ruleId":"300","severity":1,"message":"301","line":31,"column":9,"nodeType":"302","messageId":"303","endLine":60,"endColumn":10},{"ruleId":"300","severity":1,"message":"301","line":90,"column":29,"nodeType":"302","messageId":"303","endLine":107,"endColumn":30},{"ruleId":"267","severity":1,"message":"268","line":111,"column":72,"nodeType":"269","messageId":"270","endLine":111,"endColumn":74},{"ruleId":"267","severity":1,"message":"268","line":112,"column":73,"nodeType":"269","messageId":"270","endLine":112,"endColumn":75},{"ruleId":"267","severity":1,"message":"268","line":113,"column":74,"nodeType":"269","messageId":"270","endLine":113,"endColumn":76},{"ruleId":"267","severity":1,"message":"268","line":114,"column":79,"nodeType":"269","messageId":"270","endLine":114,"endColumn":81},{"ruleId":"267","severity":1,"message":"268","line":115,"column":75,"nodeType":"269","messageId":"270","endLine":115,"endColumn":77},{"ruleId":"267","severity":1,"message":"268","line":154,"column":61,"nodeType":"269","messageId":"270","endLine":154,"endColumn":63},{"ruleId":"267","severity":1,"message":"268","line":155,"column":61,"nodeType":"269","messageId":"270","endLine":155,"endColumn":63},{"ruleId":"267","severity":1,"message":"268","line":156,"column":60,"nodeType":"269","messageId":"270","endLine":156,"endColumn":62},{"ruleId":"267","severity":1,"message":"268","line":157,"column":60,"nodeType":"269","messageId":"270","endLine":157,"endColumn":62},{"ruleId":"300","severity":1,"message":"301","line":160,"column":33,"nodeType":"302","messageId":"303","endLine":169,"endColumn":34},{"ruleId":"267","severity":1,"message":"268","line":174,"column":117,"nodeType":"269","messageId":"270","endLine":174,"endColumn":119},{"ruleId":"267","severity":1,"message":"268","line":196,"column":82,"nodeType":"269","messageId":"270","endLine":196,"endColumn":84},{"ruleId":"304","severity":1,"message":"305","line":231,"column":37,"nodeType":"292","endLine":231,"endColumn":141},{"ruleId":"239","severity":1,"message":"250","line":6,"column":9,"nodeType":"241","messageId":"242","endLine":6,"endColumn":19},{"ruleId":"239","severity":1,"message":"248","line":9,"column":9,"nodeType":"241","messageId":"242","endLine":9,"endColumn":14},{"ruleId":"239","severity":1,"message":"306","line":13,"column":30,"nodeType":"241","messageId":"242","endLine":13,"endColumn":42},{"ruleId":"239","severity":1,"message":"307","line":15,"column":11,"nodeType":"241","messageId":"242","endLine":15,"endColumn":18},{"ruleId":"267","severity":1,"message":"268","line":38,"column":14,"nodeType":"269","messageId":"270","endLine":38,"endColumn":16},{"ruleId":"267","severity":1,"message":"268","line":41,"column":14,"nodeType":"269","messageId":"270","endLine":41,"endColumn":16},{"ruleId":"239","severity":1,"message":"308","line":1,"column":16,"nodeType":"241","messageId":"242","endLine":1,"endColumn":21},{"ruleId":"239","severity":1,"message":"258","line":6,"column":8,"nodeType":"241","messageId":"242","endLine":6,"endColumn":13},{"ruleId":"239","severity":1,"message":"309","line":9,"column":9,"nodeType":"241","messageId":"242","endLine":9,"endColumn":14},{"ruleId":"259","severity":1,"message":"310","line":19,"column":7,"nodeType":"261","endLine":19,"endColumn":9,"suggestions":"311"},{"ruleId":"263","severity":1,"message":"264","line":73,"column":77,"nodeType":"265","messageId":"266","endLine":73,"endColumn":79},{"ruleId":"267","severity":1,"message":"268","line":113,"column":37,"nodeType":"269","messageId":"270","endLine":113,"endColumn":39},{"ruleId":"239","severity":1,"message":"312","line":4,"column":9,"nodeType":"241","messageId":"242","endLine":4,"endColumn":20},{"ruleId":"239","severity":1,"message":"313","line":4,"column":39,"nodeType":"241","messageId":"242","endLine":4,"endColumn":49},{"ruleId":"239","severity":1,"message":"308","line":5,"column":9,"nodeType":"241","messageId":"242","endLine":5,"endColumn":14},{"ruleId":"239","severity":1,"message":"294","line":13,"column":11,"nodeType":"241","messageId":"242","endLine":13,"endColumn":17},{"ruleId":"304","severity":1,"message":"305","line":20,"column":9,"nodeType":"292","endLine":20,"endColumn":46},{"ruleId":"239","severity":1,"message":"314","line":1,"column":9,"nodeType":"241","messageId":"242","endLine":1,"endColumn":18},{"ruleId":"239","severity":1,"message":"315","line":1,"column":9,"nodeType":"241","messageId":"242","endLine":1,"endColumn":19},{"ruleId":"239","severity":1,"message":"316","line":6,"column":8,"nodeType":"241","messageId":"242","endLine":6,"endColumn":20},{"ruleId":"259","severity":1,"message":"317","line":27,"column":8,"nodeType":"261","endLine":27,"endColumn":10,"suggestions":"318"},{"ruleId":"267","severity":1,"message":"281","line":57,"column":37,"nodeType":"269","messageId":"270","endLine":57,"endColumn":39},{"ruleId":"267","severity":1,"message":"281","line":57,"column":84,"nodeType":"269","messageId":"270","endLine":57,"endColumn":86},{"ruleId":"267","severity":1,"message":"268","line":58,"column":42,"nodeType":"269","messageId":"270","endLine":58,"endColumn":44},{"ruleId":"304","severity":1,"message":"319","line":136,"column":53,"nodeType":"292","endLine":136,"endColumn":105},{"ruleId":"239","severity":1,"message":"320","line":3,"column":8,"nodeType":"241","messageId":"242","endLine":3,"endColumn":18},{"ruleId":"267","severity":1,"message":"268","line":21,"column":53,"nodeType":"269","messageId":"270","endLine":21,"endColumn":55},{"ruleId":"259","severity":1,"message":"317","line":26,"column":8,"nodeType":"261","endLine":26,"endColumn":10,"suggestions":"321"},{"ruleId":"239","severity":1,"message":"240","line":1,"column":9,"nodeType":"241","messageId":"242","endLine":1,"endColumn":17},{"ruleId":"259","severity":1,"message":"317","line":22,"column":8,"nodeType":"261","endLine":22,"endColumn":10,"suggestions":"322"},{"ruleId":"323","severity":1,"message":"324","line":38,"column":43,"nodeType":"325","endLine":38,"endColumn":48},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Login' is defined but never used.","'Home' is defined but never used.","'FullLayout' is defined but never used.","'ViewGroup' is defined but never used.","'ViewStudent' is defined but never used.","'toast' is defined but never used.","'useEffect' is defined but never used.","'checkLogin' is defined but never used.","'Alert' is defined but never used.","'Workshop' is defined but never used.","'ClientHome' is defined but never used.","'Theory' is defined but never used.","'Exam' is defined but never used.","'LoginClient' is defined but never used.","'location' is assigned a value but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'SchdDetailID', 'SchdID', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["328"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'render' is defined but never used.","'uid' is defined but never used.","'getEmailByScheduleDetail' is defined but never used.","'confirmAlert' is defined but never used.","React Hook useEffect has missing dependencies: 'SchdDetailID', 'SchdID', 'group', 'reloadStudents', and 'state'. Either include them or remove the dependency array.",["329"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'students'. Either include it or remove the dependency array.",["330"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["331","332"],"'StudentID' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Navbar' is defined but never used.","'params' is assigned a value but never used.","'FormControl' is defined but never used.","'Footer' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has missing dependencies: 'SchdDetailID', 'StdRegistID', and 'reloadWorkshopFile'. Either include them or remove the dependency array.",["333"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'SchdDetailID' is assigned a value but never used.","'history' is assigned a value but never used.","'Badge' is defined but never used.","'$mobx' is defined but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["334"],"'useLocation' is defined but never used.","'withRouter' is defined but never used.","'Container' is defined but never used.","'useContext' is defined but never used.","'StateContext' is defined but never used.","React Hook useEffect has a missing dependency: 'checker'. Either include it or remove the dependency array.",["335"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'classNames' is defined but never used.",["336"],["337"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"messageId":"344","fix":"345","desc":"346"},{"messageId":"347","fix":"348","desc":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"354","fix":"356"},{"desc":"354","fix":"357"},"Update the dependencies array to be: [SchdDetailID, SchdID, state]",{"range":"358","text":"359"},"Update the dependencies array to be: [SchdDetailID, SchdID, group, reloadStudents, state]",{"range":"360","text":"361"},"Update the dependencies array to be: [students, userPairingText]",{"range":"362","text":"363"},"removeEscape",{"range":"364","text":"365"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"366","text":"367"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [SchdDetailID, StdRegistID, reloadWorkshopFile]",{"range":"368","text":"369"},"Update the dependencies array to be: [state]",{"range":"370","text":"371"},"Update the dependencies array to be: [checker]",{"range":"372","text":"373"},{"range":"374","text":"373"},{"range":"375","text":"373"},[1057,1059],"[SchdDetailID, SchdID, state]",[2278,2280],"[SchdDetailID, SchdID, group, reloadStudents, state]",[3692,3709],"[students, userPairingText]",[4402,4403],"",[4402,4402],"\\",[1166,1168],"[SchdDetailID, StdRegistID, reloadWorkshopFile]",[761,763],"[state]",[1085,1087],"[checker]",[810,812],[694,696]]