[{"E:\\Github\\ems_zoom\\src\\index.js":"1","E:\\Github\\ems_zoom\\src\\reportWebVitals.js":"2","E:\\Github\\ems_zoom\\src\\App.js":"3","E:\\Github\\ems_zoom\\src\\ui\\home.js":"4","E:\\Github\\ems_zoom\\src\\ui\\login.js":"5","E:\\Github\\ems_zoom\\src\\ui\\email.js":"6","E:\\Github\\ems_zoom\\src\\mobx\\global-context.js":"7","E:\\Github\\ems_zoom\\src\\mobx\\mobx-store.js":"8","E:\\Github\\ems_zoom\\src\\layouts\\full-layout.js":"9","E:\\Github\\ems_zoom\\src\\ui\\view-group.js":"10","E:\\Github\\ems_zoom\\src\\ui\\view-student.js":"11","E:\\Github\\ems_zoom\\src\\components\\footer.js":"12","E:\\Github\\ems_zoom\\src\\components\\schedule.js":"13","E:\\Github\\ems_zoom\\src\\components\\top-menu.js":"14","E:\\Github\\ems_zoom\\src\\components\\services.js":"15","E:\\Github\\ems_zoom\\src\\config.js":"16","E:\\Github\\ems_zoom\\src\\client-ui\\workshop.js":"17","E:\\Github\\ems_zoom\\src\\client-ui\\client-home.js":"18","E:\\Github\\ems_zoom\\src\\client-ui\\theory.js":"19","E:\\Github\\ems_zoom\\src\\client-components\\client-services.js":"20","E:\\Github\\ems_zoom\\src\\client-ui\\exam.js":"21","E:\\Github\\ems_zoom\\src\\client-components\\check-in-process.js":"22"},{"size":689,"mtime":1610890832106,"results":"23","hashOfConfig":"24"},{"size":375,"mtime":1610037146195,"results":"25","hashOfConfig":"24"},{"size":3009,"mtime":1610890822450,"results":"26","hashOfConfig":"24"},{"size":1897,"mtime":1610539454486,"results":"27","hashOfConfig":"24"},{"size":1820,"mtime":1610808463040,"results":"28","hashOfConfig":"24"},{"size":151,"mtime":1610037146196,"results":"29","hashOfConfig":"24"},{"size":113,"mtime":1610037146194,"results":"30","hashOfConfig":"24"},{"size":833,"mtime":1610787523027,"results":"31","hashOfConfig":"24"},{"size":662,"mtime":1610890874238,"results":"32","hashOfConfig":"24"},{"size":3363,"mtime":1610806967224,"results":"33","hashOfConfig":"24"},{"size":21983,"mtime":1610809443898,"results":"34","hashOfConfig":"24"},{"size":188,"mtime":1610790676063,"results":"35","hashOfConfig":"24"},{"size":5333,"mtime":1610809565096,"results":"36","hashOfConfig":"24"},{"size":2120,"mtime":1610808597384,"results":"37","hashOfConfig":"24"},{"size":4015,"mtime":1610793441034,"results":"38","hashOfConfig":"24"},{"size":166,"mtime":1610806797530,"results":"39","hashOfConfig":"24"},{"size":13138,"mtime":1610897384881,"results":"40","hashOfConfig":"24"},{"size":91,"mtime":1610808070672,"results":"41","hashOfConfig":"24"},{"size":79,"mtime":1610808276617,"results":"42","hashOfConfig":"24"},{"size":981,"mtime":1610893822915,"results":"43","hashOfConfig":"24"},{"size":575,"mtime":1610890746459,"results":"44","hashOfConfig":"24"},{"size":2746,"mtime":1610891207331,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"i71ozh",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"48"},"E:\\Github\\ems_zoom\\src\\index.js",[],["104","105"],"E:\\Github\\ems_zoom\\src\\reportWebVitals.js",[],"E:\\Github\\ems_zoom\\src\\App.js",["106","107","108","109","110"],"import './App.css';\r\nimport {Route, Switch, useLocation} from 'react-router-dom';\r\nimport Login from \"./ui/login\";\r\nimport StateContext from \"./mobx/global-context\";\r\nimport MobxStore from \"./mobx/mobx-store\";\r\nimport {observer} from \"mobx-react\";\r\nimport Home from \"./ui/home\";\r\nimport FullLayout from \"./layouts/full-layout\";\r\nimport ViewGroup from \"./ui/view-group\";\r\nimport ViewStudent from \"./ui/view-student\";\r\nimport {ToastContainer, toast, Slide} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport {useEffect} from \"react\";\r\nimport {checkLogin} from \"./components/services\";\r\nimport {Alert} from \"react-bootstrap\"; // Import css\r\nimport Config from './config';\r\nimport Workshop from \"./client-ui/workshop\";\r\nimport ClientHome from \"./client-ui/client-home\";\r\nimport Theory from \"./client-ui/theory\";\r\nimport Exam from \"./client-ui/exam\";\r\n\r\nconst mobxStore = new MobxStore();\r\n\r\nfunction App() {\r\n    let location = useLocation();\r\n    useEffect(()=>{\r\n        checker();\r\n        setInterval(()=>{checker()},5*60000)\r\n    },[]);\r\n    function checker(){\r\n        checkLogin().then(user=>{\r\n            if(user){\r\n                mobxStore.setUser(user);\r\n            }else{\r\n                mobxStore.setUser(null);\r\n            }\r\n        })\r\n    }\r\n    if(typeof mobxStore.currentUser == 'undefined')return <Alert variant='info'>Loading...</Alert>\r\n    let {adminPath} = Config;\r\n    return (\r\n        <StateContext.Provider value={mobxStore}>\r\n            <Switch>\r\n                <Route path={adminPath()}>\r\n                    {mobxStore.currentUser\r\n                        ?\r\n                        <FullLayout>\r\n                            <Switch>\r\n                                <Route path={adminPath()} exact component={Home}/>\r\n                                <Route path={adminPath('/schedule/:SchdID(\\\\d+)/:SchdDetailID(\\\\d+)')} exact component={ViewGroup}/>\r\n                                <Route path={adminPath('/schedule/:SchdID(\\\\d+)/:SchdDetailID(\\\\d+)/:group')} component={ViewStudent}/>\r\n                            </Switch>\r\n                        </FullLayout>\r\n                        :\r\n                        <Switch>\r\n                            <Route path=\"*\" component={Login}/>\r\n                        </Switch>\r\n                    }\r\n                </Route>\r\n                <Route path=\"/\">\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={ClientHome}/>\r\n                        <Route path=\"/exam\" exact exact component={Exam}/>\r\n                        <Route path=\"/exam/:type/:StdRegistID/:SchdDetailID\" component={Exam}/>\r\n                    </Switch>\r\n                </Route>\r\n            </Switch>\r\n            <ToastContainer\r\n                transition={Slide}\r\n                limit={3}\r\n                autoClose={2000}\r\n            />\r\n        </StateContext.Provider>\r\n    );\r\n}\r\n\r\nexport default observer(App);\r\n","E:\\Github\\ems_zoom\\src\\ui\\home.js",["111"],"import Schedule from \"../components/schedule\";\r\nimport {Col, Form, Row} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst currentDate=new Date();\r\nconst currentMonth=currentDate.getMonth();\r\nconst currentYear=currentDate.getFullYear();\r\nconst Home = ()=>{\r\n    const [selectedMonth,setSelectedMonth]=useState(currentMonth+1);\r\n    const [selectedYear,setSelectedYear]=useState(currentYear);\r\n\r\n\r\n    return <div>\r\n        <Row>\r\n            <Col md={6}>\r\n                <Form.Group>\r\n                    <Form.Label>Month</Form.Label>\r\n                    <Form.Control as=\"select\" value={selectedMonth} onChange={e=>{\r\n                        setSelectedMonth(e.target.value)\r\n                    }}>\r\n                        {\r\n                            [...new Array(31)].map((v,i)=>{\r\n                                let value = i+1;\r\n                                return <option key={value} value={value}>{value}</option>\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Col>\r\n            <Col md={6}>\r\n                <Form.Group>\r\n                    <Form.Label>Year</Form.Label>\r\n                    <Form.Control as=\"select\" value={selectedYear} onChange={e=>{\r\n                        setSelectedYear(e.target.value)\r\n                    }}>\r\n                        {\r\n                            [...new Array(5)].map((v,i)=>{\r\n                                let value = currentYear-i;\r\n                                return <option key={value} value={value}>{value}</option>\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n        <Schedule month={selectedMonth} year={selectedYear}/>\r\n    </div>\r\n}\r\nexport default Home;\r\n","E:\\Github\\ems_zoom\\src\\ui\\login.js",[],"E:\\Github\\ems_zoom\\src\\ui\\email.js",[],["112","113"],"E:\\Github\\ems_zoom\\src\\mobx\\global-context.js",[],"E:\\Github\\ems_zoom\\src\\mobx\\mobx-store.js",["114","115"],"import {makeAutoObservable} from \"mobx\";\r\n\r\nclass MobxStore {\r\n    currentUser = void 0;\r\n\r\n    scheduleMenu=[];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setUser(user) {\r\n        this.currentUser = user;\r\n    }\r\n\r\n    studentApprove(code) {\r\n        let student = this.findStudent(code);\r\n        if (student) {\r\n            student.approved = true;\r\n        }\r\n    }\r\n\r\n    studentReject(code) {\r\n        let student = this.findStudent(code);\r\n        if (student) {\r\n            student.approved = false;\r\n        }\r\n    }\r\n    findStudent(code) {\r\n        let student = void 0;\r\n        Object.keys(this.students).map(group => {\r\n            if (!student) student = this.students[group].find(std => std.code == code);\r\n        })\r\n        return student;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default MobxStore;\r\n","E:\\Github\\ems_zoom\\src\\layouts\\full-layout.js",["116","117"],"import React from 'react';\r\nimport {Col, Container, Navbar, Row} from \"react-bootstrap\";\r\nimport TopMenu from \"../components/top-menu\";\r\nimport Footer from \"../components/footer\";\r\nimport {useParams,withRouter} from \"react-router-dom\";\r\n\r\nconst FullLayout = (props)=>{\r\n    const params = useParams();\r\n    console.log('top layout===',props);\r\n    return <>\r\n        <div className=\"container-wrapper\">\r\n            <TopMenu/>\r\n            <Container>\r\n                <Row>\r\n                    <Col>{props.children}</Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n        <Footer/>\r\n    </>\r\n}\r\nexport default withRouter(FullLayout);\r\n","E:\\Github\\ems_zoom\\src\\ui\\view-group.js",["118","119","120"],"import {observer} from \"mobx-react\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport {Badge, Button, Card, Col, Form, Modal, Row} from \"react-bootstrap\";\r\nimport {getEmailByScheduleDetail, getScheduleInfo} from \"../components/services\";\r\nimport Config from \"../config\";\r\n\r\nconst ViewGroup = () => {\r\n    const state = useContext(StateContext);\r\n    const {SchdID, SchdDetailID} = useParams();\r\n    const [schedule,setSchedule] = useState(null);\r\n    const [studentsWithGroup,setStudentsWithGroup] = useState(null);\r\n    const [showingGroup,setShowingGroup] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        state.scheduleMenu=[\r\n            {to:`/schedule/${SchdID}/${SchdDetailID}`,title:'Group'}\r\n        ];\r\n        getEmailByScheduleDetail(SchdID,SchdDetailID).then(res=>{\r\n            setStudentsWithGroup(res);\r\n        });\r\n        getScheduleInfo(SchdID,SchdDetailID).then(res=>{\r\n            setSchedule(res);\r\n        })\r\n    },[]);\r\n\r\n    function getEmail(group) {\r\n        if(!studentsWithGroup[group])return;\r\n        let text='';\r\n        studentsWithGroup[group].map(std=>{\r\n            text+=`${std.RegKKU.KKUMAIL},`;\r\n        })\r\n        return text.substr(0,text.length-1);\r\n    }\r\n    if(!schedule || !studentsWithGroup)return <div>Loading...</div>\r\n    return <>\r\n        <h3>รอบสอบ {schedule.SchdCode} ซึ่งมีทั้งหมด {studentsWithGroup && Object.keys(studentsWithGroup).length} กลุ่ม</h3>\r\n        <div dangerouslySetInnerHTML={{__html:schedule.DateRegist_Desc_Th}}></div>\r\n        <div>ภาค {schedule.ModuleType==1?<Badge variant=\"danger\">ทฤษฎี</Badge>:<Badge variant=\"info\">ปฏิบัติ</Badge>} ประจำวันที่ {schedule.ExamDate} / {schedule.ExamTimeStart}-{schedule.ExamTimeEnd}</div>\r\n        <Row>\r\n            {\r\n                studentsWithGroup && Object.keys(studentsWithGroup).map(grp =>\r\n                    <Col key={grp} md={6}>\r\n                        <Card className=\"mt-2\">\r\n                            <Card.Body>\r\n                                <Badge className=\"text-uppercase\">{grp}</Badge> ({studentsWithGroup[grp].length} คน) <Link to={Config.adminPath(`/schedule/${SchdID}/${SchdDetailID}/${grp}`)} className=\"btn btn-primary ml-2\">View</Link>\r\n                                <Button variant=\"secondary\" className=\"ml-2\" onClick={setShowingGroup.bind(this,grp)}>Email</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                )\r\n            }\r\n        </Row>\r\n        <Modal show={!!showingGroup} onHide={e=>setShowingGroup(null)}>\r\n            <Modal.Header closeButton>\r\n                <span className=\"text-uppercase\">{showingGroup}</span> : Email\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Control rows={20} as=\"textarea\" onChange={e=>{}} onClick={e=>e.target.select()} value={getEmail(showingGroup)}/>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={e=>setShowingGroup(null)}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </>\r\n}\r\nexport default observer(ViewGroup);\r\n","E:\\Github\\ems_zoom\\src\\ui\\view-student.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"import {useParams} from \"react-router-dom\";\r\nimport {observer} from \"mobx-react\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {Alert, Badge, Button, Col, Form, FormControl, InputGroup, Modal, Row, Table} from \"react-bootstrap\";\r\nimport {render} from \"@testing-library/react\";\r\nimport { uid } from 'uid';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport {\r\n    changeCheckInState,\r\n    getCheckInStudents,\r\n    getEmailByScheduleDetail, getMeetURL,\r\n    getScheduleInfo, removeMeetURL, setMeetURL, pairUserData, confirmBox\r\n} from \"../components/services\";\r\nimport {toast} from \"react-toastify\";\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\n\r\nlet reloadStudentsTimer=void 0;\r\nconst ViewStudent = () => {\r\n    const state = useContext(StateContext);\r\n    const {SchdID, SchdDetailID,group} = useParams();\r\n    const [schedule, setSchedule] = useState();\r\n    const [meetRoom,setMeetRoom] = useState('');\r\n    const [students,setStudents] = useState([]);\r\n    const [loadingBtn,setLoadingBtn] = useState({});\r\n    const [filter,setFilter] = useState('');\r\n    const [copiedState,setCopiedState] = useState(0);\r\n    const [userPairingText,setUserPairingText] = useState('');\r\n    const [userPairing,setUserPairing] = useState(null);\r\n    const [showEmail,setShowEmail] = useState(false);\r\n\r\n    useEffect(() => {\r\n        state.scheduleMenu = [\r\n            {to: `/schedule/${SchdID}/${SchdDetailID}`, title: 'Group'},\r\n            {to: `/schedule/${SchdID}/${SchdDetailID}/${group}`, title: 'Students'}\r\n        ];\r\n        getMeetURL(SchdID,SchdDetailID,group).then(data=>{\r\n            if(data){\r\n                setMeetRoom(data.meet_url);\r\n                setCopiedState(4);\r\n            }\r\n        });\r\n        reloadStudents();\r\n        getScheduleInfo(SchdID,SchdDetailID).then(res=>{\r\n            setSchedule(res);\r\n        })\r\n\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        let textArr=userPairingText.split(/\\n/);\r\n        let buffer={};\r\n        let currentName=null;\r\n        let expGetName=new RegExp('(.+)(?:\\\\d+:\\\\d+) ?(?:AM|PM)?');\r\n        let expGetCode=new RegExp('((?:\\\\d{9}\\\\-\\\\d{1})|(?:\\\\d{10}))');\r\n        textArr.map(line=>{\r\n            let name=line.match(expGetName);\r\n            let code=line.match(expGetCode);\r\n            if(name && (name[1]=='You'||name[1]=='คุณ'))return;\r\n            if(name){\r\n                currentName=name[1].trim();\r\n                if(currentName.substr(-1).match(/1/)){\r\n                    currentName=currentName.substr(0,currentName.length-1);\r\n                }\r\n            }else if(currentName && code){\r\n                let existed = students.find(student=>student.StudentID==fixStudentCode(code[1]));\r\n                let existedCopied={...existed};\r\n                if(existedCopied){\r\n                    if(existedCopied.avatar_name && existedCopied.avatar_name!=currentName){\r\n                        console.log(existedCopied.avatar_name,currentName);\r\n                        existedCopied.pairError=true;\r\n                    }\r\n                    buffer[currentName]=existedCopied;\r\n                }\r\n            }\r\n        })\r\n        if(Object.keys(buffer).length>0){\r\n            setUserPairing({...buffer});\r\n        }else{\r\n            setUserPairing(null);\r\n        }\r\n    },[userPairingText]);\r\n\r\n    function reloadStudents(){\r\n        getCheckInStudents(SchdID,SchdDetailID,group).then(res=>{\r\n            setStudents(sortState(res));\r\n        });\r\n    }\r\n\r\n    function sortState(students){\r\n        students.sort((a,b)=>{\r\n            if(a.check_in_status=='1' && b.check_in_status=='0')return 1;\r\n            if(a.check_in_status=='0' && b.check_in_status=='1')return -1;\r\n            return 0;\r\n        })\r\n        return students;\r\n    }\r\n\r\n    function approve(std) {\r\n        chState(std,1);\r\n    }\r\n\r\n    function fixStudentCode(code){\r\n        if(!code.match(/\\d{9}\\-\\d{1}/)){\r\n            return code.substr(0,9)+'-'+code.substr(-1)\r\n        }\r\n        return code;\r\n    }\r\n\r\n    async function reject(std) {\r\n        chState(std,0);\r\n    }\r\n\r\n    async function chState(std,state){\r\n        setLoadingBtn(prevState => ({...prevState,[std.StdRegistID]:true}))\r\n        await changeCheckInState(std.StdRegistID,state);\r\n        if(state==1){\r\n            toast.success(std.StudentID+' Approved.');\r\n        }else{\r\n            toast.success(std.StudentID+' Rejected.');\r\n        }\r\n        setTimeout(()=>{\r\n            setStudents(old => {\r\n                let existed = old.find(v=>v.Username==std.Username);\r\n                existed.check_in_status=state;\r\n                return sortState(old);\r\n            });\r\n            setLoadingBtn(prevState => ({...prevState,[std.StdRegistID]:false}))\r\n        },200);\r\n        clearTimeout(reloadStudentsTimer);\r\n        reloadStudentsTimer=setTimeout(async ()=>{\r\n            reloadStudents();\r\n        },2000);\r\n    }\r\n\r\n    function startGoogleMeet(){\r\n        setCopiedState(1);\r\n        setTimeout(()=>{\r\n            setCopiedState(2);\r\n            setTimeout(()=>{\r\n                window.open(\"https://meet.google.com\");\r\n                setCopiedState(3);\r\n            },2000);\r\n        },1000);\r\n\r\n    }\r\n\r\n    function getEmail(){\r\n        let emailText='';\r\n        students.map(std=>{\r\n            emailText+=std.email+',';\r\n        });\r\n        return emailText.substr(0,emailText.length-1);\r\n    }\r\n\r\n    async function broadcast(){\r\n        if(meetRoom.match(/meet.google.com\\//)){\r\n            await setMeetURL(SchdID,SchdDetailID,group,meetRoom);\r\n            setCopiedState(4);\r\n            toast.success(`Broadcast success.`);\r\n        }else{\r\n            toast.warn('Please fill Google meet link.')\r\n        }\r\n    }\r\n\r\n    async function pairUser(approve=false){\r\n        if(!userPairing) return;\r\n        let buffer=[];\r\n        Object.keys(userPairing).map(pair=>{\r\n            let student=userPairing[pair];\r\n            if(student){\r\n                let {Username,StudentID}=student;\r\n                buffer.push({\r\n                    approve,\r\n                    Username,\r\n                    avatar_name:pair,\r\n                    SchdID,\r\n                    SchdDetailID,\r\n                    group\r\n                });\r\n            }\r\n\r\n        })\r\n        await pairUserData(buffer);\r\n        setUserPairingText('');\r\n        reloadStudents();\r\n        if(approve){\r\n            toast.success('Pair user and approve success.')\r\n        }else{\r\n            toast.success('Pair user success.')\r\n        }\r\n    }\r\n\r\n    function pairUserAndApprove(){\r\n        confirmBox('Pair user and Approve',null,()=>{\r\n            pairUser(true);\r\n        })\r\n    }\r\n\r\n    return <div>\r\n        {\r\n            (schedule && students)\r\n                ? <>\r\n                    <Row>\r\n                        <Col>\r\n                            <div>\r\n                                <Form.Group>\r\n                                    {copiedState==4\r\n                                        ?\r\n                                        <Button variant=\"danger\" onClick={e=>{\r\n                                            confirmBox('Stop broadcast',null,()=>{\r\n                                                removeMeetURL(SchdID,SchdDetailID,group).then(()=>{\r\n                                                    setCopiedState(0);\r\n                                                    setMeetRoom('');\r\n                                                })\r\n                                            })\r\n                                        }}>Stop Google meet</Button>\r\n                                        :\r\n                                        <CopyToClipboard text={getEmail()}\r\n                                                          onCopy={()=>{startGoogleMeet()}}\r\n                                        >\r\n                                            <Button variant=\"primary\">Start Google meet</Button>\r\n                                        </CopyToClipboard>\r\n                                    }\r\n                                    {!!copiedState &&\r\n                                    <div>\r\n                                        {(copiedState==1 || copiedState==2) && <Alert variant=\"success\" className=\"mt-2 mb-1\">Copied email to clipboard.</Alert>}\r\n                                        {copiedState==2 && <Alert variant=\"warning\">Starting Google meet.</Alert>}\r\n                                        {copiedState==3 && <div>\r\n                                            <InputGroup className=\"mb-3 mt-4\" id=\"search\">\r\n                                                <InputGroup.Prepend>\r\n                                                    <InputGroup.Text id=\"basic-addon1\">Google meet URL</InputGroup.Text>\r\n                                                </InputGroup.Prepend>\r\n                                                <FormControl\r\n                                                    placeholder=\"meet.google.com/xxx-yyy-zzz\"\r\n                                                    value={meetRoom}\r\n                                                    onChange={e=>setMeetRoom(e.target.value)}\r\n                                                />\r\n                                                <InputGroup.Append>\r\n                                                    <Button variant=\"danger\" onClick={e=>{broadcast()}}>Broadcast</Button>\r\n                                                </InputGroup.Append>\r\n                                            </InputGroup>\r\n                                        </div>\r\n                                        }\r\n                                        {copiedState==4 &&\r\n                                        <>\r\n                                            <Alert variant=\"success\" className=\"mt-2\">Broadcasting... <Badge variant=\"danger\">{meetRoom}</Badge> to every client.</Alert>\r\n                                            <Row>\r\n                                                <Col md={6}>\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>User pairing tool</Form.Label>\r\n                                                        <Form.Control as=\"textarea\" rows={7} value={userPairingText} onChange={e=>setUserPairingText(e.target.value)}/>\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                                <Col md={6}>\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>User pairing results</Form.Label>\r\n                                                        {userPairing\r\n                                                            ?\r\n                                                            <Table>\r\n                                                                <thead>\r\n                                                                <tr>\r\n                                                                    <th>Code</th>\r\n                                                                    <th>Name</th>\r\n                                                                    <th>Google meet name</th>\r\n                                                                </tr>\r\n                                                                </thead>\r\n                                                                <tbody>\r\n                                                                {Object.keys(userPairing).map((pair,i)=>{\r\n                                                                    let student=userPairing[pair];\r\n                                                                   return  <tr key={student.StudentID+'_'+i}>\r\n                                                                       <td>{student.pairError\r\n                                                                           ?\r\n                                                                           <div>{student.StudentID}\r\n                                                                               <Badge className=\"ml-1\" variant=\"danger\">\r\n                                                                                   Existed -> {student.avatar_name}\r\n                                                                               </Badge>\r\n                                                                           </div>\r\n                                                                           :\r\n                                                                           student.StudentID}\r\n                                                                       </td>\r\n                                                                       <td>{student.FirstName_Th} {student.LastName_Th}</td>\r\n                                                                       <td>{pair}</td>\r\n                                                                   </tr>\r\n                                                                    })\r\n                                                                }\r\n                                                                </tbody>\r\n                                                            </Table>\r\n                                                            :\r\n                                                            <div>Waiting... input</div>\r\n\r\n                                                        }\r\n                                                    </Form.Group>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            {userPairing && Object.keys(userPairing).length>0 &&\r\n                                            <>\r\n                                                <Form.Group className=\"text-center\">\r\n                                                    <Button onClick={e=>pairUser()} className=\"mr-4\">Pair</Button>\r\n                                                    <Button onClick={e=>pairUserAndApprove()} variant=\"secondary\">Pair and approve</Button>\r\n                                                </Form.Group>\r\n                                            </>\r\n                                            }\r\n                                        </>\r\n                                        }\r\n                                    </div>\r\n                                    }\r\n                                    </Form.Group>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <Col xs={'auto'}>\r\n                                    <h3>นักศึกในกลุ่ม <span className=\"text-uppercase\">{group}</span></h3>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button variant=\"outline-secondary\" className=\"ml-2\" onClick={e=>setShowEmail(true)}>View email</Button>\r\n                                </Col>\r\n                            </Row>\r\n                            <div dangerouslySetInnerHTML={{__html:schedule.DateRegist_Desc_Th}}></div>\r\n                            <div>ภาค {schedule.ModuleType==1?<Badge variant=\"danger\">ทฤษฎี</Badge>:<Badge variant=\"info\">ปฏิบัติ</Badge>} ประจำวันที่ {schedule.ExamDate} / {schedule.ExamTimeStart}-{schedule.ExamTimeEnd}</div>\r\n                            <InputGroup className=\"mb-3 mt-4\" id=\"search\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon1\">ค้นหา</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl\r\n                                    placeholder=\"Code | Avatar name | FName | LName | Email\"\r\n                                    value={filter}\r\n                                    onChange={e=>setFilter(e.target.value)}\r\n                                />\r\n                                <InputGroup.Append>\r\n                                    <Button variant=\"dark\" onClick={e=>setFilter('')}>Reset</Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                            <Table className=\"sticky table-hover\">\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Code</th>\r\n                                    <th>Avatar name</th>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Status</th>\r\n                                    <th>Check In</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {\r\n                                    students && students\r\n                                        .filter(std=>{\r\n                                            if(!filter)return true;\r\n                                            let regExp=new RegExp(`${filter}`,'ig');\r\n                                            return (\r\n                                                std.StudentID.match(regExp)\r\n                                                || std.FirstName_Th.match(regExp)\r\n                                                || std.LastName_Th.match(regExp)\r\n                                                || std.email.match(regExp)\r\n                                                || (std.avatar_name && std.avatar_name.match(regExp))\r\n                                            )\r\n                                        })\r\n                                        .map((std, i) =>\r\n                                            <tr key={'std_'+i} className={std.check_in_status=='1' ? 'text-success text-white' : ''}>\r\n                                                <td>{i + 1}</td>\r\n                                                <td>{std.StudentID}</td>\r\n                                                <td>{std.avatar_name?<strong variant='info' style={{fontSize:'110%'}}>{std.avatar_name}</strong>:'Not pair'}</td>\r\n                                                <td>{std.FirstName_Th} {std.LastName_Th}</td>\r\n                                                <td>{std.email}</td>\r\n                                                <td>\r\n                                                    {\r\n                                                        std.check_in_status=='1'\r\n                                                            ? <Badge variant=\"success\" className=\"ml-1\">Approved</Badge>\r\n                                                            : <Badge variant=\"info\" className=\"ml-1\">Waiting</Badge>\r\n                                                    }\r\n                                                    {\r\n                                                        std.IPAddress && <Badge variant=\"warning\" className=\"ml-1\">{std.IPAddress}</Badge>\r\n                                                    }\r\n                                                    <div>\r\n                                                        {\r\n                                                            std.IsStart && <Badge variant=\"secondary\" className=\"ml-1\">Logged In</Badge>\r\n                                                        }\r\n                                                        {\r\n                                                            std.IsEnd && <Badge variant=\"danger\" className=\"ml-1\">Exited</Badge>\r\n                                                        }\r\n                                                    </div>\r\n                                                </td>\r\n                                                <td>\r\n                                                    {std.check_in_status=='1'\r\n                                                        ? <Button variant=\"danger\" type=\"button\" disabled={loadingBtn[std.StdRegistID]} onClick={reject.bind(this, std)}>Reject{loadingBtn[std.StdRegistID]?'...':''}</Button>\r\n                                                        : <Button variant=\"success\" type=\"button\" disabled={loadingBtn[std.StdRegistID]} onClick={approve.bind(this, std)}>Approve{loadingBtn[std.StdRegistID]?'...':''}</Button>\r\n                                                    }\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n                                }\r\n                                </tbody>\r\n                            </Table>\r\n                        </Col>\r\n                    </Row>\r\n                    <Modal show={showEmail} onHide={e=>setShowEmail(false)}>\r\n                        <Modal.Header closeButton>\r\n                            <span className=\"text-uppercase\">Email {group}:</span>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <Form.Control rows={20} as=\"textarea\" onChange={e=>{}} onClick={e=>e.target.select()} value={getEmail()}/>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={e=>setShowEmail(false)}>\r\n                                Close\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </>\r\n                : <div>Loading...</div>\r\n        }\r\n    </div>\r\n}\r\nexport default observer(ViewStudent);\r\n","E:\\Github\\ems_zoom\\src\\components\\footer.js",["153"],"import {Container} from \"react-bootstrap\";\r\n\r\nconst Footer=()=>{\r\n    return <div className=\"footer\">\r\n        <div style={{padding:'10px'}}></div>\r\n    </div>\r\n}\r\nexport default Footer;\r\n","E:\\Github\\ems_zoom\\src\\components\\schedule.js",["154","155","156","157","158","159"],"import {Alert, Badge, Button, Card, Col, Row, Modal, Form} from \"react-bootstrap\";\r\nimport {observer} from \"mobx-react\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Config from \"../config\";\r\nimport {getEmailByScheduleDetail, getSchedules} from \"./services\";\r\nimport {$mobx} from \"mobx\";\r\n\r\nconst Schedule = ({month,year}) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [studentsWithGroup, setStudentsWithGroup] = useState(null);\r\n    const [schedules,setSchedules] = useState(null);\r\n    const state = useContext(StateContext);\r\n\r\n    useEffect(()=>{\r\n        state.scheduleMenu=[];\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n       getSchedules(month,year).then(results=>{\r\n           setSchedules(results);\r\n       });\r\n    },[month,year]);\r\n\r\n    async function showEmail(schd){\r\n        let studentsWithGroup = await getEmailByScheduleDetail(schd.SchdID,schd.SchdDetailID);\r\n        setStudentsWithGroup(studentsWithGroup);\r\n        setShowModal(true);\r\n    }\r\n    function hideModal(){\r\n        setStudentsWithGroup(null);\r\n        setShowModal(false);\r\n    }\r\n    return <>\r\n        <h3>รอบสอบของ ปี {year}</h3>\r\n        {\r\n            schedules && Object.keys(schedules).map(day => {\r\n                return (\r\n                    <Card key={day} className=\"mt-2\">\r\n                        <Card.Header>\r\n                            <Card.Text>การสอบวันที่ {day}</Card.Text>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row>\r\n                                {schedules[day].map((schd,i) =>\r\n                                    <SchdBlock key={`${schd.examDate}_${i}`} schd={schd} onEmail={showEmail.bind(this,schd)}/>\r\n                                )}\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            })\r\n        }\r\n        <Modal show={showModal} onHide={hideModal}>\r\n            <Modal.Header closeButton>\r\n                {studentsWithGroup\r\n                    ?<Modal.Title>Email ในรอบสอบ {studentsWithGroup.title}</Modal.Title>\r\n                    :<Modal.Title>Loading...</Modal.Title>\r\n                }\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {\r\n                    studentsWithGroup\r\n                        ?<>\r\n                            {\r\n                                Object.keys(studentsWithGroup).map(group=>{\r\n                                    let emailText='';\r\n                                    return <div key={group}>\r\n                                        <h3 style={{textTransform:'capitalize'}}>{group}</h3>\r\n                                        {\r\n                                            studentsWithGroup[group].map(std=>{\r\n                                                emailText+=`${std.RegKKU.KKUMAIL},`\r\n                                            })\r\n                                        }\r\n                                        <Form.Control rows={5} as='textarea'\r\n                                                      onChange={e=>{}}\r\n                                                      onClick={e=>e.target.select()}\r\n                                                      value={emailText.substr(0,emailText.length-1)}/>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </>\r\n                        :<div>Loading....</div>\r\n                }\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hideModal}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={hideModal}>\r\n                    Save Changes\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </>\r\n}\r\n\r\n\r\nconst SchdBlock = ({schd,onEmail}) => {\r\n    const history = useHistory();\r\n    return <Col md={4}>\r\n        <div style={{padding: '10px'}}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title>\r\n                        <small>{schd.ExamTimeStart}-{schd.ExamTimeEnd}</small>\r\n                    </Card.Title>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <div className=\"text-center\">\r\n                    {schd.ModuleType==\"1\"?<Alert variant=\"danger\">ทฤษฎี</Alert>:<Alert variant=\"info\">ปฏิบัติ</Alert>}\r\n                        <div className=\"text-center\">\r\n                            <Button className=\"ml-2\" onClick={e => history.push(Config.adminPath(`/schedule/${schd.SchdID}/${schd.SchdDetailID}`))}>Enter</Button>\r\n                            <Button variant=\"secondary\" className=\"ml-2\" onClick={onEmail}>Email</Button>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <Card.Text className=\"text-right\">Student: {schd.studentCount}</Card.Text>\r\n                </Card.Footer>\r\n            </Card>\r\n        </div>\r\n    </Col>\r\n}\r\n\r\nexport default observer(Schedule);\r\n","E:\\Github\\ems_zoom\\src\\components\\top-menu.js",["160","161","162","163","164"],"import {observer} from \"mobx-react\";\r\nimport {useContext} from \"react\";\r\nimport StateContext from \"../mobx/global-context\";\r\nimport {useLocation,NavLink,useParams,withRouter,useHistory} from 'react-router-dom';\r\nimport {Badge, Button} from \"react-bootstrap\";\r\nimport {userLogout} from \"./services\";\r\nimport Config from \"../config\";\r\n\r\n\r\nconst TopMenu=(props)=>{\r\n    const state = useContext(StateContext);\r\n    const history = useHistory();\r\n    const params = useParams();\r\n    async function logout(){\r\n        await userLogout();\r\n        state.setUser(null);\r\n        history.push(Config.adminPath('/login'));\r\n    }\r\n    return <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Ems Check-in</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n                aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink className=\"nav-link\" to={Config.adminPath()} exact>Schedule</NavLink>\r\n                </li>\r\n                {\r\n                    state.scheduleMenu.map(mn=>\r\n                        <li key={mn.title} className=\"nav-item\">\r\n                            <NavLink className=\"nav-link\" to={Config.adminPath(mn.to)} exact>-> {mn.title}</NavLink>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink className=\"nav-link\" to=\"/\" exact>\r\n                        Username: <strong className=\"mr-2\">{state.currentUser.username}</strong><Button variant=\"danger\" onClick={e=>{logout()}}>Logout</Button>\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n}\r\nexport default observer(TopMenu);\r\n","E:\\Github\\ems_zoom\\src\\components\\services.js",["165","166","167","168"],"import axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport {confirmAlert} from \"react-confirm-alert\";\r\n\r\nexport function getSchedules(month,year){\r\n    return  new Promise(resolve => {\r\n        axios.post('/check_in_resful_api.php?method=schedule',{m:parseInt(month),y:parseInt(year)})\r\n            .then(res=>{\r\n               let resultWithGroup={};\r\n               res.data.results.sort((a,b)=>{\r\n                  let aDate = moment(a.ExamDate);\r\n                  let bDate = moment(b.ExamDate);\r\n                   if(aDate==bDate)return 0;\r\n                   if(aDate>bDate)return 1;\r\n                   return -1;\r\n               });\r\n               res.data.results.map(schd=>{\r\n                    schd = tranformScheduleDate(schd);\r\n                    if(!resultWithGroup[schd.ExamDate])resultWithGroup[schd.ExamDate]=[];\r\n                    resultWithGroup[schd.ExamDate].push(schd);\r\n                });\r\n                Object.keys(resultWithGroup).map(key=>{\r\n                    resultWithGroup[key].sort((a,b)=>{\r\n                        let aDate = parseInt(a.ExamTimeStart);\r\n                        let bDate = parseInt(b.ExamTimeEnd);\r\n                        if(aDate==bDate)return 0;\r\n                        if(aDate>bDate)return 1;\r\n                        return -1;\r\n                    })\r\n                })\r\n                console.log(resultWithGroup);\r\n                resolve(resultWithGroup);\r\n            })\r\n    })\r\n}\r\n\r\nexport function getEmailByScheduleDetail(SchdID,SchdDetailID){\r\n    return new Promise(resolve => {\r\n        axios.post('/check_in_resful_api.php?method=students',{SchdID,SchdDetailID})\r\n            .then(res=>{\r\n                let {data} = res;\r\n                resolve(data);\r\n            }).catch(e=>{\r\n                resolve(null)\r\n        });\r\n    })\r\n}\r\n\r\nexport function getScheduleInfo(SchdID,SchdDetailID){\r\n    return new Promise(async resolve => {\r\n        let schedule = await request('schedule-info',{SchdID,SchdDetailID});\r\n        schedule = tranformScheduleDate(schedule);\r\n        resolve(schedule);\r\n    });\r\n}\r\n\r\nexport function getCheckInStudents(SchdID,SchdDetailID,group){\r\n    return request('get-check-in-students',{SchdID,SchdDetailID,group})\r\n}\r\n\r\nexport function changeCheckInState(StdRegistID,state){\r\n    return request('change-state',{StdRegistID,state})\r\n}\r\n\r\nexport function getMeetURL(SchdID, SchdDetailID,group){\r\n    return request('get-meet-url',{SchdID,SchdDetailID,group})\r\n}\r\n\r\nexport function setMeetURL(SchdID, SchdDetailID,group,url){\r\n    return request('set-meet-url',{SchdID,SchdDetailID,group,url})\r\n}\r\n\r\nexport function removeMeetURL(SchdID, SchdDetailID,group){\r\n    return request('remove-meet-url',{SchdID,SchdDetailID,group})\r\n}\r\n\r\nexport function pairUserData(pairData=[]){\r\n    return request('pair-user',{pairData})\r\n}\r\n\r\nexport function checkLogin(){\r\n    return request('check-login')\r\n}\r\n\r\nexport function userLogout(){\r\n    return request('logout')\r\n}\r\n\r\nexport function userLogin(username,password){\r\n    return request('login',{username,password})\r\n}\r\n\r\nexport function confirmBox(title,detail,fn){\r\n    confirmAlert({\r\n        title:title,\r\n        message:detail?detail:'Do you want to do?',\r\n        buttons:[\r\n            {\r\n                label: 'Yes',\r\n                onClick: () => fn()\r\n            },\r\n            {\r\n                label: 'No',\r\n            }\r\n        ]\r\n    });\r\n}\r\n\r\nfunction tranformScheduleDate(schedule){\r\n    schedule.ExamDate=schedule.ExamDate.split(' ')[0];\r\n    schedule.ExamTimeStart=schedule.ExamTimeStart.split(' ')[1];\r\n    schedule.ExamTimeEnd=schedule.ExamTimeEnd.split(' ')[1];\r\n    return schedule;\r\n}\r\n\r\nfunction request(method,params={}){\r\n    return new Promise(resolve => {\r\n        axios.post('/check_in_resful_api.php?method='+method,params)\r\n            .then(res=>{\r\n                resolve(res.data);\r\n            }).catch(e=>{\r\n                document.location.href='/login'\r\n            // resolve(null)\r\n        });\r\n    })\r\n}\r\n","E:\\Github\\ems_zoom\\src\\config.js",[],"E:\\Github\\ems_zoom\\src\\client-ui\\workshop.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"E:\\Github\\ems_zoom\\src\\client-ui\\client-home.js",[],"E:\\Github\\ems_zoom\\src\\client-ui\\theory.js",[],"E:\\Github\\ems_zoom\\src\\client-components\\client-services.js",[],"E:\\Github\\ems_zoom\\src\\client-ui\\exam.js",["188","189"],"import {useParams} from \"react-router-dom\";\r\nimport CheckInProcess from \"../client-components/check-in-process\";\r\nimport React from \"react\";\r\nimport Workshop from \"./workshop\";\r\n\r\nconst Exam=()=>{\r\n    const {type,StdRegistID, SchdDetailID} = useParams();\r\n    function onApproved(){\r\n\r\n    }\r\n    function onDenied(){\r\n\r\n    }\r\n    return <CheckInProcess\r\n        StdRegistID={StdRegistID}\r\n        onApproved={onApproved}\r\n        onDenied={onDenied}\r\n    >\r\n        {type=='workshop' &&\r\n            <Workshop/>\r\n        }\r\n    </CheckInProcess>\r\n}\r\nexport default Exam;\r\n","E:\\Github\\ems_zoom\\src\\client-components\\check-in-process.js",["190","191","192","193","194","195"],"import {useEffect, useState} from \"react\";\r\nimport {checkClient} from \"./client-services\";\r\nimport {Card, Col, Container, Row} from \"react-bootstrap\";\r\n\r\nlet last_update = 0;\r\nlet last_update_url = 0;\r\n\r\nconst CheckInProcess = ({StdRegistID, onApproved, onDenied, children}) => {\r\n\r\n    const [approve, setApprove] = useState(void 0);\r\n    const [meetUrl, setMeetUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // document.body.style.paddingLeft='0px';\r\n        checker();\r\n        setInterval(()=>checker(),5000);\r\n    }, []);\r\n\r\n    function checker() {\r\n        checkClient(StdRegistID).then(data => {\r\n            if (last_update != data.last_update || last_update_url != data.last_update_url) {\r\n                if (data.check_in_status == \"1\") {\r\n                    setApprove(true);\r\n                    onApproved();\r\n                } else {\r\n                    if (data.meet_url) {\r\n                        let url = data.meet_url.match(/^http/) ? data.meet_url : `https://${data.meet_url}`;\r\n                        setMeetUrl(url);\r\n                    }else{\r\n                        setMeetUrl(null);\r\n                    }\r\n                    setApprove(false);\r\n                    onDenied();\r\n                }\r\n                last_update = data.last_update;\r\n                last_update_url = data.last_update_url;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (typeof approve == 'undefined') return <div>Loading...</div>;\r\n    if (!approve) {\r\n        return <Container>\r\n            <Row>\r\n                <Col>\r\n                    <Card className=\"mt-4 bg-dark text-white\">\r\n                        <Card.Header>EMS Check-In</Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                !meetUrl\r\n                                    ?\r\n                                    <>\r\n                                        <span>Please <span className=\"badge badge-info\">check-in</span> before start</span>\r\n                                        <a className=\"btn btn-primary btn-sm ml-2 disabled\">Waiting meet...</a>\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <span>Please <span className=\"badge badge-info\">check-in</span> before start</span>\r\n                                        <a className=\"btn btn-primary btn-sm ml-2\" target='_blank' href={meetUrl}>Click Here</a>\r\n                                    </>\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    }\r\n    return children;\r\n}\r\nexport default CheckInProcess;\r\n",{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":11,"column":25,"nodeType":"202","messageId":"203","endLine":11,"endColumn":30},{"ruleId":"200","severity":1,"message":"204","line":18,"column":8,"nodeType":"202","messageId":"203","endLine":18,"endColumn":16},{"ruleId":"200","severity":1,"message":"205","line":20,"column":8,"nodeType":"202","messageId":"203","endLine":20,"endColumn":14},{"ruleId":"200","severity":1,"message":"206","line":26,"column":9,"nodeType":"202","messageId":"203","endLine":26,"endColumn":17},{"ruleId":"207","severity":1,"message":"208","line":64,"column":51,"nodeType":"209","endLine":64,"endColumn":56},{"ruleId":"200","severity":1,"message":"210","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":13},{"ruleId":"196","replacedBy":"211"},{"ruleId":"198","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":31,"column":46,"nodeType":"215","messageId":"216","endLine":31,"endColumn":48},{"ruleId":"217","severity":1,"message":"218","line":32,"column":79,"nodeType":"219","messageId":"220","endLine":32,"endColumn":81},{"ruleId":"200","severity":1,"message":"221","line":2,"column":25,"nodeType":"202","messageId":"203","endLine":2,"endColumn":31},{"ruleId":"200","severity":1,"message":"222","line":8,"column":11,"nodeType":"202","messageId":"203","endLine":8,"endColumn":17},{"ruleId":"223","severity":1,"message":"224","line":26,"column":7,"nodeType":"225","endLine":26,"endColumn":9,"suggestions":"226"},{"ruleId":"213","severity":1,"message":"214","line":31,"column":41,"nodeType":"215","messageId":"216","endLine":31,"endColumn":43},{"ruleId":"217","severity":1,"message":"218","line":40,"column":38,"nodeType":"219","messageId":"220","endLine":40,"endColumn":40},{"ruleId":"200","severity":1,"message":"227","line":6,"column":9,"nodeType":"202","messageId":"203","endLine":6,"endColumn":15},{"ruleId":"200","severity":1,"message":"228","line":7,"column":10,"nodeType":"202","messageId":"203","endLine":7,"endColumn":13},{"ruleId":"200","severity":1,"message":"229","line":12,"column":5,"nodeType":"202","messageId":"203","endLine":12,"endColumn":29},{"ruleId":"200","severity":1,"message":"230","line":16,"column":10,"nodeType":"202","messageId":"203","endLine":16,"endColumn":22},{"ruleId":"223","severity":1,"message":"231","line":48,"column":8,"nodeType":"225","endLine":48,"endColumn":10,"suggestions":"232"},{"ruleId":"213","severity":1,"message":"233","line":56,"column":25,"nodeType":"215","messageId":"234","endLine":56,"endColumn":27},{"ruleId":"217","severity":1,"message":"218","line":59,"column":32,"nodeType":"219","messageId":"220","endLine":59,"endColumn":34},{"ruleId":"217","severity":1,"message":"218","line":59,"column":48,"nodeType":"219","messageId":"220","endLine":59,"endColumn":50},{"ruleId":"213","severity":1,"message":"214","line":59,"column":57,"nodeType":"235","messageId":"236","endLine":59,"endColumn":64},{"ruleId":"217","severity":1,"message":"218","line":66,"column":71,"nodeType":"219","messageId":"220","endLine":66,"endColumn":73},{"ruleId":"217","severity":1,"message":"237","line":69,"column":78,"nodeType":"219","messageId":"220","endLine":69,"endColumn":80},{"ruleId":"223","severity":1,"message":"238","line":82,"column":7,"nodeType":"225","endLine":82,"endColumn":24,"suggestions":"239"},{"ruleId":"217","severity":1,"message":"218","line":92,"column":33,"nodeType":"219","messageId":"220","endLine":92,"endColumn":35},{"ruleId":"217","severity":1,"message":"218","line":92,"column":59,"nodeType":"219","messageId":"220","endLine":92,"endColumn":61},{"ruleId":"217","severity":1,"message":"218","line":93,"column":33,"nodeType":"219","messageId":"220","endLine":93,"endColumn":35},{"ruleId":"217","severity":1,"message":"218","line":93,"column":59,"nodeType":"219","messageId":"220","endLine":93,"endColumn":61},{"ruleId":"240","severity":1,"message":"241","line":104,"column":30,"nodeType":"242","messageId":"243","endLine":104,"endColumn":31,"suggestions":"244"},{"ruleId":"217","severity":1,"message":"218","line":117,"column":17,"nodeType":"219","messageId":"220","endLine":117,"endColumn":19},{"ruleId":"217","severity":1,"message":"218","line":124,"column":53,"nodeType":"219","messageId":"220","endLine":124,"endColumn":55},{"ruleId":"213","severity":1,"message":"214","line":150,"column":25,"nodeType":"215","messageId":"216","endLine":150,"endColumn":27},{"ruleId":"213","severity":1,"message":"214","line":169,"column":42,"nodeType":"215","messageId":"216","endLine":169,"endColumn":44},{"ruleId":"200","severity":1,"message":"245","line":172,"column":31,"nodeType":"202","messageId":"203","endLine":172,"endColumn":40},{"ruleId":"217","severity":1,"message":"218","line":208,"column":49,"nodeType":"219","messageId":"220","endLine":208,"endColumn":51},{"ruleId":"217","severity":1,"message":"218","line":227,"column":54,"nodeType":"219","messageId":"220","endLine":227,"endColumn":56},{"ruleId":"217","severity":1,"message":"218","line":227,"column":72,"nodeType":"219","messageId":"220","endLine":227,"endColumn":74},{"ruleId":"217","severity":1,"message":"218","line":228,"column":53,"nodeType":"219","messageId":"220","endLine":228,"endColumn":55},{"ruleId":"217","severity":1,"message":"218","line":229,"column":53,"nodeType":"219","messageId":"220","endLine":229,"endColumn":55},{"ruleId":"217","severity":1,"message":"218","line":245,"column":53,"nodeType":"219","messageId":"220","endLine":245,"endColumn":55},{"ruleId":"217","severity":1,"message":"218","line":323,"column":58,"nodeType":"219","messageId":"220","endLine":323,"endColumn":60},{"ruleId":"217","severity":1,"message":"218","line":364,"column":94,"nodeType":"219","messageId":"220","endLine":364,"endColumn":96},{"ruleId":"217","severity":1,"message":"218","line":372,"column":76,"nodeType":"219","messageId":"220","endLine":372,"endColumn":78},{"ruleId":"217","severity":1,"message":"218","line":389,"column":73,"nodeType":"219","messageId":"220","endLine":389,"endColumn":75},{"ruleId":"200","severity":1,"message":"246","line":1,"column":9,"nodeType":"202","messageId":"203","endLine":1,"endColumn":18},{"ruleId":"200","severity":1,"message":"247","line":1,"column":16,"nodeType":"202","messageId":"203","endLine":1,"endColumn":21},{"ruleId":"200","severity":1,"message":"210","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":13},{"ruleId":"200","severity":1,"message":"248","line":9,"column":9,"nodeType":"202","messageId":"203","endLine":9,"endColumn":14},{"ruleId":"223","severity":1,"message":"249","line":19,"column":7,"nodeType":"225","endLine":19,"endColumn":9,"suggestions":"250"},{"ruleId":"213","severity":1,"message":"214","line":73,"column":77,"nodeType":"215","messageId":"216","endLine":73,"endColumn":79},{"ruleId":"217","severity":1,"message":"218","line":113,"column":37,"nodeType":"219","messageId":"220","endLine":113,"endColumn":39},{"ruleId":"200","severity":1,"message":"251","line":4,"column":9,"nodeType":"202","messageId":"203","endLine":4,"endColumn":20},{"ruleId":"200","severity":1,"message":"252","line":4,"column":39,"nodeType":"202","messageId":"203","endLine":4,"endColumn":49},{"ruleId":"200","severity":1,"message":"247","line":5,"column":9,"nodeType":"202","messageId":"203","endLine":5,"endColumn":14},{"ruleId":"200","severity":1,"message":"222","line":13,"column":11,"nodeType":"202","messageId":"203","endLine":13,"endColumn":17},{"ruleId":"253","severity":1,"message":"254","line":20,"column":9,"nodeType":"255","endLine":20,"endColumn":46},{"ruleId":"217","severity":1,"message":"218","line":13,"column":28,"nodeType":"219","messageId":"220","endLine":13,"endColumn":30},{"ruleId":"213","severity":1,"message":"214","line":17,"column":41,"nodeType":"215","messageId":"216","endLine":17,"endColumn":43},{"ruleId":"213","severity":1,"message":"214","line":22,"column":53,"nodeType":"215","messageId":"216","endLine":22,"endColumn":55},{"ruleId":"217","severity":1,"message":"218","line":26,"column":33,"nodeType":"219","messageId":"220","endLine":26,"endColumn":35},{"ruleId":"200","severity":1,"message":"256","line":1,"column":53,"nodeType":"202","messageId":"203","endLine":1,"endColumn":64},{"ruleId":"200","severity":1,"message":"257","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":14},{"ruleId":"200","severity":1,"message":"258","line":4,"column":9,"nodeType":"202","messageId":"203","endLine":4,"endColumn":13},{"ruleId":"223","severity":1,"message":"259","line":25,"column":8,"nodeType":"225","endLine":25,"endColumn":10,"suggestions":"260"},{"ruleId":"261","severity":1,"message":"262","line":31,"column":9,"nodeType":"263","messageId":"264","endLine":60,"endColumn":10},{"ruleId":"261","severity":1,"message":"262","line":90,"column":29,"nodeType":"263","messageId":"264","endLine":107,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":111,"column":72,"nodeType":"219","messageId":"220","endLine":111,"endColumn":74},{"ruleId":"217","severity":1,"message":"218","line":112,"column":73,"nodeType":"219","messageId":"220","endLine":112,"endColumn":75},{"ruleId":"217","severity":1,"message":"218","line":113,"column":74,"nodeType":"219","messageId":"220","endLine":113,"endColumn":76},{"ruleId":"217","severity":1,"message":"218","line":114,"column":79,"nodeType":"219","messageId":"220","endLine":114,"endColumn":81},{"ruleId":"217","severity":1,"message":"218","line":115,"column":75,"nodeType":"219","messageId":"220","endLine":115,"endColumn":77},{"ruleId":"217","severity":1,"message":"218","line":154,"column":61,"nodeType":"219","messageId":"220","endLine":154,"endColumn":63},{"ruleId":"217","severity":1,"message":"218","line":155,"column":61,"nodeType":"219","messageId":"220","endLine":155,"endColumn":63},{"ruleId":"217","severity":1,"message":"218","line":156,"column":60,"nodeType":"219","messageId":"220","endLine":156,"endColumn":62},{"ruleId":"217","severity":1,"message":"218","line":157,"column":60,"nodeType":"219","messageId":"220","endLine":157,"endColumn":62},{"ruleId":"261","severity":1,"message":"262","line":160,"column":33,"nodeType":"263","messageId":"264","endLine":169,"endColumn":34},{"ruleId":"217","severity":1,"message":"218","line":174,"column":117,"nodeType":"219","messageId":"220","endLine":174,"endColumn":119},{"ruleId":"217","severity":1,"message":"218","line":196,"column":82,"nodeType":"219","messageId":"220","endLine":196,"endColumn":84},{"ruleId":"253","severity":1,"message":"254","line":231,"column":37,"nodeType":"255","endLine":231,"endColumn":141},{"ruleId":"200","severity":1,"message":"265","line":7,"column":30,"nodeType":"202","messageId":"203","endLine":7,"endColumn":42},{"ruleId":"217","severity":1,"message":"218","line":19,"column":14,"nodeType":"219","messageId":"220","endLine":19,"endColumn":16},{"ruleId":"223","severity":1,"message":"266","line":17,"column":8,"nodeType":"225","endLine":17,"endColumn":10,"suggestions":"267"},{"ruleId":"217","severity":1,"message":"237","line":21,"column":29,"nodeType":"219","messageId":"220","endLine":21,"endColumn":31},{"ruleId":"217","severity":1,"message":"237","line":21,"column":68,"nodeType":"219","messageId":"220","endLine":21,"endColumn":70},{"ruleId":"217","severity":1,"message":"218","line":22,"column":42,"nodeType":"219","messageId":"220","endLine":22,"endColumn":44},{"ruleId":"253","severity":1,"message":"268","line":54,"column":41,"nodeType":"255","endLine":54,"endColumn":93},{"ruleId":"269","severity":1,"message":"270","line":59,"column":41,"nodeType":"255","endLine":59,"endColumn":115},"no-native-reassign",["271"],"no-negated-in-lhs",["272"],"no-unused-vars","'toast' is defined but never used.","Identifier","unusedVar","'Workshop' is defined but never used.","'Theory' is defined but never used.","'location' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'axios' is defined but never used.",["271"],["272"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Navbar' is defined but never used.","'params' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'SchdDetailID', 'SchdID', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["273"],"'render' is defined but never used.","'uid' is defined but never used.","'getEmailByScheduleDetail' is defined but never used.","'confirmAlert' is defined but never used.","React Hook useEffect has missing dependencies: 'SchdDetailID', 'SchdID', 'group', 'reloadStudents', and 'state'. Either include them or remove the dependency array.",["274"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'students'. Either include it or remove the dependency array.",["275"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["276","277"],"'StudentID' is assigned a value but never used.","'Container' is defined but never used.","'Badge' is defined but never used.","'$mobx' is defined but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["278"],"'useLocation' is defined but never used.","'withRouter' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FormControl' is defined but never used.","'Footer' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has missing dependencies: 'SchdDetailID', 'StdRegistID', and 'reloadWorkshopFile'. Either include them or remove the dependency array.",["279"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'SchdDetailID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checker'. Either include it or remove the dependency array.",["280"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"messageId":"287","fix":"288","desc":"289"},{"messageId":"290","fix":"291","desc":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},"Update the dependencies array to be: [SchdDetailID, SchdID, state]",{"range":"299","text":"300"},"Update the dependencies array to be: [SchdDetailID, SchdID, group, reloadStudents, state]",{"range":"301","text":"302"},"Update the dependencies array to be: [students, userPairingText]",{"range":"303","text":"304"},"removeEscape",{"range":"305","text":"306"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"307","text":"308"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [state]",{"range":"309","text":"310"},"Update the dependencies array to be: [SchdDetailID, StdRegistID, reloadWorkshopFile]",{"range":"311","text":"312"},"Update the dependencies array to be: [checker]",{"range":"313","text":"314"},[1057,1059],"[SchdDetailID, SchdID, state]",[1950,1952],"[SchdDetailID, SchdID, group, reloadStudents, state]",[3364,3381],"[students, userPairingText]",[3966,3967],"",[3966,3966],"\\",[761,763],"[state]",[1166,1168],"[SchdDetailID, StdRegistID, reloadWorkshopFile]",[532,534],"[checker]"]